{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n\n// function ProfileDashboard() {\n//   const [profiles, setProfiles] = useState([]);\n//   const [profile, setProfile] = useState({ name: '', email: '', bio: '' });\n//   const [editProfileId, setEditProfileId] = useState(null);\n\n//   // Fetch all profiles\n//   const fetchProfiles = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/user-profiles');\n//       const data = await response.json();\n//       setProfiles(data);\n//     } catch (error) {\n//       console.error('Error fetching profiles:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchProfiles();\n//   }, []);\n\n//   // Create or Update profile\n//   const handleSave = async () => {\n//     try {\n//       if (editProfileId) {\n//         // Update profile\n//         const response = await fetch(`http://localhost:5000/api/user-profiles/${editProfileId}`, {\n//           method: 'PUT',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(profile),\n//         });\n//         const data = await response.json();\n//         setProfiles(profiles.map(p => p._id === data._id ? data : p));\n//       } else {\n//         // Create new profile\n//         const response = await fetch('http://localhost:5000/api/user-profiles', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(profile),\n//         });\n//         const data = await response.json();\n//         setProfiles([...profiles, data]);\n//       }\n//       setProfile({ name: '', email: '', bio: '' });\n//       setEditProfileId(null);\n//     } catch (error) {\n//       console.error('Error saving profile:', error);\n//     }\n//   };\n\n//   // Delete profile\n//   const handleDelete = async (id) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/user-profiles/${id}`, { method: 'DELETE' });\n//       setProfiles(profiles.filter(p => p._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting profile:', error);\n//     }\n//   };\n\n//   // Set profile for editing\n//   const handleEdit = (profile) => {\n//     setProfile(profile);\n//     setEditProfileId(profile._id);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Profile Dashboard</h2>\n//       <div>\n//         <h3>{editProfileId ? 'Edit Profile' : 'Add New Profile'}</h3>\n//         <input\n//           type=\"text\"\n//           value={profile.name}\n//           onChange={(e) => setProfile({ ...profile, name: e.target.value })}\n//           placeholder=\"Name\"\n//         />\n//         <input\n//           type=\"email\"\n//           value={profile.email}\n//           onChange={(e) => setProfile({ ...profile, email: e.target.value })}\n//           placeholder=\"Email\"\n//         />\n//         <textarea\n//           value={profile.bio}\n//           onChange={(e) => setProfile({ ...profile, bio: e.target.value })}\n//           placeholder=\"Bio\"\n//         />\n//         <button onClick={handleSave}>{editProfileId ? 'Update Profile' : 'Save Profile'}</button>\n//       </div>\n//       <ul>\n//         {profiles.map(p => (\n//           <li key={p._id}>\n//             <strong>{p.name}</strong> ({p.email}): {p.bio}\n//             <button onClick={() => handleEdit(p)}>Edit</button>\n//             <button onClick={() => handleDelete(p._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default ProfileDashboard;","map":{"version":3,"names":[],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/components/ProfileDahboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// function ProfileDashboard() {\r\n//   const [profiles, setProfiles] = useState([]);\r\n//   const [profile, setProfile] = useState({ name: '', email: '', bio: '' });\r\n//   const [editProfileId, setEditProfileId] = useState(null);\r\n\r\n//   // Fetch all profiles\r\n//   const fetchProfiles = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/user-profiles');\r\n//       const data = await response.json();\r\n//       setProfiles(data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching profiles:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchProfiles();\r\n//   }, []);\r\n\r\n//   // Create or Update profile\r\n//   const handleSave = async () => {\r\n//     try {\r\n//       if (editProfileId) {\r\n//         // Update profile\r\n//         const response = await fetch(`http://localhost:5000/api/user-profiles/${editProfileId}`, {\r\n//           method: 'PUT',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify(profile),\r\n//         });\r\n//         const data = await response.json();\r\n//         setProfiles(profiles.map(p => p._id === data._id ? data : p));\r\n//       } else {\r\n//         // Create new profile\r\n//         const response = await fetch('http://localhost:5000/api/user-profiles', {\r\n//           method: 'POST',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify(profile),\r\n//         });\r\n//         const data = await response.json();\r\n//         setProfiles([...profiles, data]);\r\n//       }\r\n//       setProfile({ name: '', email: '', bio: '' });\r\n//       setEditProfileId(null);\r\n//     } catch (error) {\r\n//       console.error('Error saving profile:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Delete profile\r\n//   const handleDelete = async (id) => {\r\n//     try {\r\n//       await fetch(`http://localhost:5000/api/user-profiles/${id}`, { method: 'DELETE' });\r\n//       setProfiles(profiles.filter(p => p._id !== id));\r\n//     } catch (error) {\r\n//       console.error('Error deleting profile:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Set profile for editing\r\n//   const handleEdit = (profile) => {\r\n//     setProfile(profile);\r\n//     setEditProfileId(profile._id);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Profile Dashboard</h2>\r\n//       <div>\r\n//         <h3>{editProfileId ? 'Edit Profile' : 'Add New Profile'}</h3>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={profile.name}\r\n//           onChange={(e) => setProfile({ ...profile, name: e.target.value })}\r\n//           placeholder=\"Name\"\r\n//         />\r\n//         <input\r\n//           type=\"email\"\r\n//           value={profile.email}\r\n//           onChange={(e) => setProfile({ ...profile, email: e.target.value })}\r\n//           placeholder=\"Email\"\r\n//         />\r\n//         <textarea\r\n//           value={profile.bio}\r\n//           onChange={(e) => setProfile({ ...profile, bio: e.target.value })}\r\n//           placeholder=\"Bio\"\r\n//         />\r\n//         <button onClick={handleSave}>{editProfileId ? 'Update Profile' : 'Save Profile'}</button>\r\n//       </div>\r\n//       <ul>\r\n//         {profiles.map(p => (\r\n//           <li key={p._id}>\r\n//             <strong>{p.name}</strong> ({p.email}): {p.bio}\r\n//             <button onClick={() => handleEdit(p)}>Edit</button>\r\n//             <button onClick={() => handleDelete(p._id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProfileDashboard;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
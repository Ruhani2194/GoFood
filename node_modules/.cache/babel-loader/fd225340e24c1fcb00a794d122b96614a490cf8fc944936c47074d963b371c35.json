{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruhan\\\\Documents\\\\gofood\\\\mernapp\\\\src\\\\components\\\\Footer.js\",\n  _s = $RefreshSig$();\n// // // // // // // // // import React from 'react'\n// // // // // // // // // import {link} from 'react-router-dom'\n// // // // // // // // // export default function Footer() {\n// // // // // // // // //   return (\n// // // // // // // // //     <div><div className=\"container\">\n// // // // // // // // //     <footer className=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\n// // // // // // // // //       <div className=\"col-md-4 d-flex align-items-center\">\n// // // // // // // // //         <link to=\"/\" className=\"mb-3 me-2 mb-md-0 text-muted text-decoration-none lh-1\">\n// // // // // // // // //         </link>\n// // // // // // // // //         <span className=\"text-muted\">Â© 2024<i>GoFood</i>, Inc</span>\n// // // // // // // // //       </div>\n\n// // // // // // // // //       {/* <ul className=\"nav col-md-4 justify-content-end list-unstyled d-flex\">\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use ></use></svg></a></li>\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use ></use></svg></a></li>\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use></use></svg></a></li>\n// // // // // // // // //       </ul> */}\n// // // // // // // // //     </footer>\n// // // // // // // // //   </div>\n// // // // // // // // //   </div>\n// // // // // // // // //   )\n// // // // // // // // // }\n\n// // // // // // // // import React, { useEffect, useState } from 'react';\n\n// // // // // // // // function Footer() {\n// // // // // // // //   const [reviews, setReviews] = useState([]);\n// // // // // // // //   const [newReview, setNewReview] = useState({ user: '', comment: '', rating: 1 });\n// // // // // // // //   const [editReview, setEditReview] = useState(null);\n\n// // // // // // // //   // Fetch reviews from the backend\n// // // // // // // //   const fetchReviews = async () => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch('http://localhost:5000/api/reviews');\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews(data);\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error fetching reviews:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   useEffect(() => {\n// // // // // // // //     fetchReviews();\n// // // // // // // //   }, []);\n\n// // // // // // // //   // Create a new review\n// // // // // // // //   const handleCreate = async () => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch('http://localhost:5000/api/reviews', {\n// // // // // // // //         method: 'POST',\n// // // // // // // //         headers: { 'Content-Type': 'application/json' },\n// // // // // // // //         body: JSON.stringify(newReview),\n// // // // // // // //       });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews([...reviews, data]);\n// // // // // // // //       setNewReview({ user: '', comment: '', rating: 1 });\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error creating review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // Update an existing review\n// // // // // // // //   const handleUpdate = async () => {\n// // // // // // // //     if (!editReview) return;\n\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n// // // // // // // //         method: 'PUT',\n// // // // // // // //         headers: { 'Content-Type': 'application/json' },\n// // // // // // // //         body: JSON.stringify(editReview),\n// // // // // // // //       });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews(reviews.map(review => (review._id === data._id ? data : review)));\n// // // // // // // //       setEditReview(null);\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error updating review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // Delete a review\n// // // // // // // //   const handleDelete = async (id) => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch(`http://localhost:5000/api/reviews/${id}`, { method: 'DELETE' });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       setReviews(reviews.filter(review => review._id !== id));\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error deleting review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   return (\n// // // // // // // //     <footer className=\"bg-dark text-light py-3\">\n// // // // // // // //       <div className=\"container\">\n// // // // // // // //         <h4>User Reviews</h4>\n// // // // // // // //         <ul className=\"list-unstyled\">\n// // // // // // // //           {reviews.map(review => (\n// // // // // // // //             <li key={review._id} className=\"mb-2\">\n// // // // // // // //               <div>\n// // // // // // // //                 <strong>{review.user}</strong>: {review.comment} (Rating: {review.rating})\n// // // // // // // //                 <button onClick={() => handleDelete(review._id)} className=\"btn btn-danger btn-sm ms-2\">Delete</button>\n// // // // // // // //                 <button onClick={() => setEditReview(review)} className=\"btn btn-primary btn-sm ms-2\">Edit</button>\n// // // // // // // //               </div>\n// // // // // // // //             </li>\n// // // // // // // //           ))}\n// // // // // // // //         </ul>\n// // // // // // // //         {editReview ? (\n// // // // // // // //           <div>\n// // // // // // // //             <h5>Edit Review</h5>\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={editReview.user}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, user: e.target.value })}\n// // // // // // // //               placeholder=\"User\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={editReview.comment}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, comment: e.target.value })}\n// // // // // // // //               placeholder=\"Comment\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"number\"\n// // // // // // // //               min=\"1\"\n// // // // // // // //               max=\"5\"\n// // // // // // // //               value={editReview.rating}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, rating: Number(e.target.value) })}\n// // // // // // // //               placeholder=\"Rating\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <button onClick={handleUpdate} className=\"btn btn-warning\">Update</button>\n// // // // // // // //           </div>\n// // // // // // // //         ) : (\n// // // // // // // //           <div>\n// // // // // // // //             <h5>Add Review</h5>\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={newReview.user}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\n// // // // // // // //               placeholder=\"User\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={newReview.comment}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n// // // // // // // //               placeholder=\"Comment\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"number\"\n// // // // // // // //               min=\"1\"\n// // // // // // // //               max=\"5\"\n// // // // // // // //               value={newReview.rating}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, rating: Number(e.target.value) })}\n// // // // // // // //               placeholder=\"Rating\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <button onClick={handleCreate} className=\"btn btn-success\">Add Review</button>\n// // // // // // // //           </div>\n// // // // // // // //         )}\n// // // // // // // //       </div>\n// // // // // // // //     </footer>\n// // // // // // // //   );\n// // // // // // // // }\n\n// // // // // // // // export default Footer;\n\n// import React, { useEffect, useState } from 'react';\n\n// function Footer() {\n//   const [reviews, setReviews] = useState([]);\n//   const [newReview, setNewReview] = useState({ user: '', comment: '', rating: 1 });\n//   const [editReview, setEditReview] = useState(null);\n\n//   // Fetch reviews from the backend\n//   const fetchReviews = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/reviews');\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       console.error('Error fetching reviews:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Create a new review\n//   const handleCreate = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/reviews', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(newReview),\n//       });\n//       const data = await response.json();\n//       setReviews([...reviews, data]);\n//       setNewReview({ user: '', comment: '', rating: 1 });\n//     } catch (error) {\n//       console.error('Error creating review:', error);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdate = async () => {\n//     if (!editReview) return;\n\n//     try {\n//       const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(editReview),\n//       });\n//       const data = await response.json();\n//       setReviews(reviews.map(review => (review._id === data._id ? data : review)));\n//       setEditReview(null);\n//     } catch (error) {\n//       console.error('Error updating review:', error);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDelete = async (id) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/reviews/${id}`, { method: 'DELETE' });\n//       setReviews(reviews.filter(review => review._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting review:', error);\n//     }\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-3\">\n//       <div className=\"container\">\n//         <h4>User Reviews</h4>\n//         <ul className=\"list-unstyled\">\n//           {reviews.map(review => (\n//             <li key={review._id}>\n//               <div>\n//                 <strong>{review.user}</strong>: {review.comment} (Rating: {review.rating})\n//                 <button onClick={() => handleDelete(review._id)} className=\"btn btn-danger btn-sm ms-2\">Delete</button>\n//                 <button onClick={() => setEditReview(review)} className=\"btn btn-primary btn-sm ms-2\">Edit</button>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//         {editReview ? (\n//           <div>\n//             <h5>Edit Review</h5>\n//             <input\n//               type=\"text\"\n//               value={editReview.user}\n//               onChange={(e) => setEditReview({ ...editReview, user: e.target.value })}\n//               placeholder=\"User\"\n//             />\n//             <input\n//               type=\"text\"\n//               value={editReview.comment}\n//               onChange={(e) => setEditReview({ ...editReview, comment: e.target.value })}\n//               placeholder=\"Comment\"\n//             />\n//             <input\n//               type=\"number\"\n//               min=\"1\"\n//               max=\"5\"\n//               value={editReview.rating}\n//               onChange={(e) => setEditReview({ ...editReview, rating: e.target.value })}\n//               placeholder=\"Rating\"\n//             />\n//             <button onClick={handleUpdate} className=\"btn btn-warning\">Update</button>\n//           </div>\n//         ) : (\n//           <div>\n//             <h5>Add Review</h5>\n//             <input\n//               type=\"text\"\n//               value={newReview.user}\n//               onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\n//               placeholder=\"User\"\n//             />\n//             <input\n//               type=\"text\"\n//               value={newReview.comment}\n//               onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n//               placeholder=\"Comment\"\n//             />\n//             <input\n//               type=\"number\"\n//               min=\"1\"\n//               max=\"5\"\n//               value={newReview.rating}\n//               onChange={(e) => setNewReview({ ...newReview, rating: e.target.value })}\n//               placeholder=\"Rating\"\n//             />\n//             <button onClick={handleCreate} className=\"btn btn-success\">Add Review</button>\n//           </div>\n//         )}\n//       </div>\n//     </footer>\n//   );\n// }\n\n// export default Footer;\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Footer() {\n  _s();\n  const [reviews, setReviews] = useState([]);\n  const [newReview, setNewReview] = useState({\n    user: '',\n    comment: '',\n    rating: 1\n  });\n  const [editReview, setEditReview] = useState(null);\n\n  // Fetch reviews from the backend\n  const fetchReviews = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/reviews');\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews(data);\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n    }\n  };\n  useEffect(() => {\n    fetchReviews();\n  }, []);\n\n  // Create a new review\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/reviews', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newReview)\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews([...reviews, data]);\n      setNewReview({\n        user: '',\n        comment: '',\n        rating: 1\n      });\n    } catch (error) {\n      console.error('Error creating review:', error);\n    }\n  };\n\n  // Update an existing review\n  const handleUpdate = async () => {\n    if (!editReview) return;\n    try {\n      const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(editReview)\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews(reviews.map(review => review._id === data._id ? data : review));\n      setEditReview(null);\n    } catch (error) {\n      console.error('Error updating review:', error);\n    }\n  };\n\n  // Delete a review\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/reviews/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      setReviews(reviews.filter(review => review._id !== id));\n    } catch (error) {\n      console.error('Error deleting review:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    className: \"bg-dark text-light py-3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"User Reviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-unstyled\",\n        children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: review.user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this), \": \", review.comment, \" (Rating: \", review.rating, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(review._id),\n              className: \"btn btn-danger btn-sm ms-2\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setEditReview(review),\n              className: \"btn btn-primary btn-sm ms-2\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this)\n        }, review._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), editReview ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Edit Review\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editReview.user,\n          onChange: e => setEditReview({\n            ...editReview,\n            user: e.target.value\n          }),\n          placeholder: \"User\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editReview.comment,\n          onChange: e => setEditReview({\n            ...editReview,\n            comment: e.target.value\n          }),\n          placeholder: \"Comment\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"5\",\n          value: editReview.rating,\n          onChange: e => setEditReview({\n            ...editReview,\n            rating: Number(e.target.value)\n          }),\n          placeholder: \"Rating\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdate,\n          className: \"btn btn-warning\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Add Review\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newReview.user,\n          onChange: e => setNewReview({\n            ...newReview,\n            user: e.target.value\n          }),\n          placeholder: \"User\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newReview.comment,\n          onChange: e => setNewReview({\n            ...newReview,\n            comment: e.target.value\n          }),\n          placeholder: \"Comment\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"5\",\n          value: newReview.rating,\n          onChange: e => setNewReview({\n            ...newReview,\n            rating: Number(e.target.value)\n          }),\n          placeholder: \"Rating\",\n          className: \"form-control mb-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreate,\n          className: \"btn btn-success\",\n          children: \"Add Review\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n_s(Footer, \"1sBDJoHGFkcJOsYjmZNiWgIkVyU=\");\n_c = Footer;\nexport default Footer;\nvar _c;\n$RefreshReg$(_c, \"Footer\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Footer","_s","reviews","setReviews","newReview","setNewReview","user","comment","rating","editReview","setEditReview","fetchReviews","response","fetch","ok","Error","status","data","json","error","console","handleCreate","method","headers","body","JSON","stringify","handleUpdate","_id","map","review","handleDelete","id","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","min","max","Number","_c","$RefreshReg$"],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/components/Footer.js"],"sourcesContent":["// // // // // // // // // import React from 'react'\n// // // // // // // // // import {link} from 'react-router-dom'\n// // // // // // // // // export default function Footer() {\n// // // // // // // // //   return (\n// // // // // // // // //     <div><div className=\"container\">\n// // // // // // // // //     <footer className=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\n// // // // // // // // //       <div className=\"col-md-4 d-flex align-items-center\">\n// // // // // // // // //         <link to=\"/\" className=\"mb-3 me-2 mb-md-0 text-muted text-decoration-none lh-1\">\n// // // // // // // // //         </link>\n// // // // // // // // //         <span className=\"text-muted\">Â© 2024<i>GoFood</i>, Inc</span>\n// // // // // // // // //       </div>\n  \n// // // // // // // // //       {/* <ul className=\"nav col-md-4 justify-content-end list-unstyled d-flex\">\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use ></use></svg></a></li>\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use ></use></svg></a></li>\n// // // // // // // // //         <li className=\"ms-3\"><a className=\"text-muted\" href=\"/\"><svg className=\"bi\" width=\"24\" height=\"24\"><use></use></svg></a></li>\n// // // // // // // // //       </ul> */}\n// // // // // // // // //     </footer>\n// // // // // // // // //   </div>\n// // // // // // // // //   </div>\n// // // // // // // // //   )\n// // // // // // // // // }\n\n// // // // // // // // import React, { useEffect, useState } from 'react';\n\n// // // // // // // // function Footer() {\n// // // // // // // //   const [reviews, setReviews] = useState([]);\n// // // // // // // //   const [newReview, setNewReview] = useState({ user: '', comment: '', rating: 1 });\n// // // // // // // //   const [editReview, setEditReview] = useState(null);\n\n// // // // // // // //   // Fetch reviews from the backend\n// // // // // // // //   const fetchReviews = async () => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch('http://localhost:5000/api/reviews');\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews(data);\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error fetching reviews:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   useEffect(() => {\n// // // // // // // //     fetchReviews();\n// // // // // // // //   }, []);\n\n// // // // // // // //   // Create a new review\n// // // // // // // //   const handleCreate = async () => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch('http://localhost:5000/api/reviews', {\n// // // // // // // //         method: 'POST',\n// // // // // // // //         headers: { 'Content-Type': 'application/json' },\n// // // // // // // //         body: JSON.stringify(newReview),\n// // // // // // // //       });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews([...reviews, data]);\n// // // // // // // //       setNewReview({ user: '', comment: '', rating: 1 });\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error creating review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // Update an existing review\n// // // // // // // //   const handleUpdate = async () => {\n// // // // // // // //     if (!editReview) return;\n\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n// // // // // // // //         method: 'PUT',\n// // // // // // // //         headers: { 'Content-Type': 'application/json' },\n// // // // // // // //         body: JSON.stringify(editReview),\n// // // // // // // //       });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       const data = await response.json();\n// // // // // // // //       setReviews(reviews.map(review => (review._id === data._id ? data : review)));\n// // // // // // // //       setEditReview(null);\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error updating review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // Delete a review\n// // // // // // // //   const handleDelete = async (id) => {\n// // // // // // // //     try {\n// // // // // // // //       const response = await fetch(`http://localhost:5000/api/reviews/${id}`, { method: 'DELETE' });\n// // // // // // // //       if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n// // // // // // // //       setReviews(reviews.filter(review => review._id !== id));\n// // // // // // // //     } catch (error) {\n// // // // // // // //       console.error('Error deleting review:', error);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   return (\n// // // // // // // //     <footer className=\"bg-dark text-light py-3\">\n// // // // // // // //       <div className=\"container\">\n// // // // // // // //         <h4>User Reviews</h4>\n// // // // // // // //         <ul className=\"list-unstyled\">\n// // // // // // // //           {reviews.map(review => (\n// // // // // // // //             <li key={review._id} className=\"mb-2\">\n// // // // // // // //               <div>\n// // // // // // // //                 <strong>{review.user}</strong>: {review.comment} (Rating: {review.rating})\n// // // // // // // //                 <button onClick={() => handleDelete(review._id)} className=\"btn btn-danger btn-sm ms-2\">Delete</button>\n// // // // // // // //                 <button onClick={() => setEditReview(review)} className=\"btn btn-primary btn-sm ms-2\">Edit</button>\n// // // // // // // //               </div>\n// // // // // // // //             </li>\n// // // // // // // //           ))}\n// // // // // // // //         </ul>\n// // // // // // // //         {editReview ? (\n// // // // // // // //           <div>\n// // // // // // // //             <h5>Edit Review</h5>\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={editReview.user}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, user: e.target.value })}\n// // // // // // // //               placeholder=\"User\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={editReview.comment}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, comment: e.target.value })}\n// // // // // // // //               placeholder=\"Comment\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"number\"\n// // // // // // // //               min=\"1\"\n// // // // // // // //               max=\"5\"\n// // // // // // // //               value={editReview.rating}\n// // // // // // // //               onChange={(e) => setEditReview({ ...editReview, rating: Number(e.target.value) })}\n// // // // // // // //               placeholder=\"Rating\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <button onClick={handleUpdate} className=\"btn btn-warning\">Update</button>\n// // // // // // // //           </div>\n// // // // // // // //         ) : (\n// // // // // // // //           <div>\n// // // // // // // //             <h5>Add Review</h5>\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={newReview.user}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\n// // // // // // // //               placeholder=\"User\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"text\"\n// // // // // // // //               value={newReview.comment}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n// // // // // // // //               placeholder=\"Comment\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <input\n// // // // // // // //               type=\"number\"\n// // // // // // // //               min=\"1\"\n// // // // // // // //               max=\"5\"\n// // // // // // // //               value={newReview.rating}\n// // // // // // // //               onChange={(e) => setNewReview({ ...newReview, rating: Number(e.target.value) })}\n// // // // // // // //               placeholder=\"Rating\"\n// // // // // // // //               className=\"form-control mb-2\"\n// // // // // // // //             />\n// // // // // // // //             <button onClick={handleCreate} className=\"btn btn-success\">Add Review</button>\n// // // // // // // //           </div>\n// // // // // // // //         )}\n// // // // // // // //       </div>\n// // // // // // // //     </footer>\n// // // // // // // //   );\n// // // // // // // // }\n\n// // // // // // // // export default Footer;\n\n\n// import React, { useEffect, useState } from 'react';\n\n// function Footer() {\n//   const [reviews, setReviews] = useState([]);\n//   const [newReview, setNewReview] = useState({ user: '', comment: '', rating: 1 });\n//   const [editReview, setEditReview] = useState(null);\n\n//   // Fetch reviews from the backend\n//   const fetchReviews = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/reviews');\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       console.error('Error fetching reviews:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Create a new review\n//   const handleCreate = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/reviews', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(newReview),\n//       });\n//       const data = await response.json();\n//       setReviews([...reviews, data]);\n//       setNewReview({ user: '', comment: '', rating: 1 });\n//     } catch (error) {\n//       console.error('Error creating review:', error);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdate = async () => {\n//     if (!editReview) return;\n\n//     try {\n//       const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(editReview),\n//       });\n//       const data = await response.json();\n//       setReviews(reviews.map(review => (review._id === data._id ? data : review)));\n//       setEditReview(null);\n//     } catch (error) {\n//       console.error('Error updating review:', error);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDelete = async (id) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/reviews/${id}`, { method: 'DELETE' });\n//       setReviews(reviews.filter(review => review._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting review:', error);\n//     }\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-3\">\n//       <div className=\"container\">\n//         <h4>User Reviews</h4>\n//         <ul className=\"list-unstyled\">\n//           {reviews.map(review => (\n//             <li key={review._id}>\n//               <div>\n//                 <strong>{review.user}</strong>: {review.comment} (Rating: {review.rating})\n//                 <button onClick={() => handleDelete(review._id)} className=\"btn btn-danger btn-sm ms-2\">Delete</button>\n//                 <button onClick={() => setEditReview(review)} className=\"btn btn-primary btn-sm ms-2\">Edit</button>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//         {editReview ? (\n//           <div>\n//             <h5>Edit Review</h5>\n//             <input\n//               type=\"text\"\n//               value={editReview.user}\n//               onChange={(e) => setEditReview({ ...editReview, user: e.target.value })}\n//               placeholder=\"User\"\n//             />\n//             <input\n//               type=\"text\"\n//               value={editReview.comment}\n//               onChange={(e) => setEditReview({ ...editReview, comment: e.target.value })}\n//               placeholder=\"Comment\"\n//             />\n//             <input\n//               type=\"number\"\n//               min=\"1\"\n//               max=\"5\"\n//               value={editReview.rating}\n//               onChange={(e) => setEditReview({ ...editReview, rating: e.target.value })}\n//               placeholder=\"Rating\"\n//             />\n//             <button onClick={handleUpdate} className=\"btn btn-warning\">Update</button>\n//           </div>\n//         ) : (\n//           <div>\n//             <h5>Add Review</h5>\n//             <input\n//               type=\"text\"\n//               value={newReview.user}\n//               onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\n//               placeholder=\"User\"\n//             />\n//             <input\n//               type=\"text\"\n//               value={newReview.comment}\n//               onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n//               placeholder=\"Comment\"\n//             />\n//             <input\n//               type=\"number\"\n//               min=\"1\"\n//               max=\"5\"\n//               value={newReview.rating}\n//               onChange={(e) => setNewReview({ ...newReview, rating: e.target.value })}\n//               placeholder=\"Rating\"\n//             />\n//             <button onClick={handleCreate} className=\"btn btn-success\">Add Review</button>\n//           </div>\n//         )}\n//       </div>\n//     </footer>\n//   );\n// }\n\n// export default Footer;\n\nimport React, { useEffect, useState } from 'react';\n\nfunction Footer() {\n  const [reviews, setReviews] = useState([]);\n  const [newReview, setNewReview] = useState({ user: '', comment: '', rating: 1 });\n  const [editReview, setEditReview] = useState(null);\n\n  // Fetch reviews from the backend\n  const fetchReviews = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/reviews');\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews(data);\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchReviews();\n  }, []);\n\n  // Create a new review\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/reviews', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newReview),\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews([...reviews, data]);\n      setNewReview({ user: '', comment: '', rating: 1 });\n    } catch (error) {\n      console.error('Error creating review:', error);\n    }\n  };\n\n  // Update an existing review\n  const handleUpdate = async () => {\n    if (!editReview) return;\n\n    try {\n      const response = await fetch(`http://localhost:5000/api/reviews/${editReview._id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(editReview),\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setReviews(reviews.map(review => (review._id === data._id ? data : review)));\n      setEditReview(null);\n    } catch (error) {\n      console.error('Error updating review:', error);\n    }\n  };\n\n  // Delete a review\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/reviews/${id}`, { method: 'DELETE' });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      setReviews(reviews.filter(review => review._id !== id));\n    } catch (error) {\n      console.error('Error deleting review:', error);\n    }\n  };\n\n  return (\n    <footer className=\"bg-dark text-light py-3\">\n      <div className=\"container\">\n        <h4>User Reviews</h4>\n        <ul className=\"list-unstyled\">\n          {reviews.map(review => (\n            <li key={review._id} className=\"mb-2\">\n              <div>\n                <strong>{review.user}</strong>: {review.comment} (Rating: {review.rating})\n                <button onClick={() => handleDelete(review._id)} className=\"btn btn-danger btn-sm ms-2\">Delete</button>\n                <button onClick={() => setEditReview(review)} className=\"btn btn-primary btn-sm ms-2\">Edit</button>\n              </div>\n            </li>\n          ))}\n        </ul>\n        {editReview ? (\n          <div>\n            <h5>Edit Review</h5>\n            <input\n              type=\"text\"\n              value={editReview.user}\n              onChange={(e) => setEditReview({ ...editReview, user: e.target.value })}\n              placeholder=\"User\"\n              className=\"form-control mb-2\"\n            />\n            <input\n              type=\"text\"\n              value={editReview.comment}\n              onChange={(e) => setEditReview({ ...editReview, comment: e.target.value })}\n              placeholder=\"Comment\"\n              className=\"form-control mb-2\"\n            />\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"5\"\n              value={editReview.rating}\n              onChange={(e) => setEditReview({ ...editReview, rating: Number(e.target.value) })}\n              placeholder=\"Rating\"\n              className=\"form-control mb-2\"\n            />\n            <button onClick={handleUpdate} className=\"btn btn-warning\">Update</button>\n          </div>\n        ) : (\n          <div>\n            <h5>Add Review</h5>\n            <input\n              type=\"text\"\n              value={newReview.user}\n              onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}\n              placeholder=\"User\"\n              className=\"form-control mb-2\"\n            />\n            <input\n              type=\"text\"\n              value={newReview.comment}\n              onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}\n              placeholder=\"Comment\"\n              className=\"form-control mb-2\"\n            />\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"5\"\n              value={newReview.rating}\n              onChange={(e) => setNewReview({ ...newReview, rating: Number(e.target.value) })}\n              placeholder=\"Rating\"\n              className=\"form-control mb-2\"\n            />\n            <button onClick={handleCreate} className=\"btn btn-success\">Add Review</button>\n          </div>\n        )}\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
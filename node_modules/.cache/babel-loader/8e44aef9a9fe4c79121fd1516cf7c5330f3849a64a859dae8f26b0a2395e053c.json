{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruhan\\\\Documents\\\\gofood\\\\mernapp\\\\src\\\\components\\\\Footer.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// export default function Footer() {\n//   <footer className=\"bg-dark text-light py-5\">\n//   <div className=\"container\">\n//     {/* Your existing Footer content */}\n//     {/* Footer Note */}\n//     <div className=\"text-center mt-5\">\n//       <span className=\"text-muted\">Â© 2024 GoFood, Inc</span>\n//     </div>\n//   </div>\n// </footer>\n//   const [reviews, setReviews] = useState([]);\n//   const [formData, setFormData] = useState({\n//     userId: '',\n//     foodItemId: '',\n//     rating: '',\n//     review: '',\n//   });\n//   const [editMode, setEditMode] = useState(false);\n//   const [currentReviewId, setCurrentReviewId] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState({ type: '', text: '' });\n\n//   const apiUrl = 'http://localhost:5000/api/reviews';\n\n//   // Fetch all reviews\n//   const fetchReviews = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.status} ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Handle input change\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Validate form data\n//   const validateForm = () => {\n//     const { userId, foodItemId, rating, review } = formData;\n//     if (!userId || !foodItemId || !rating || !review) {\n//       setMessage({ type: 'warning', text: 'Please fill in all fields.' });\n//       return false;\n//     }\n//     if (rating < 1 || rating > 5) {\n//       setMessage({ type: 'warning', text: 'Rating must be between 1 and 5.' });\n//       return false;\n//     }\n//     return true;\n//   };\n\n//   // Reset form\n//   const resetForm = () => {\n//     setFormData({\n//       userId: '',\n//       foodItemId: '',\n//       rating: '',\n//       review: '',\n//     });\n//     setEditMode(false);\n//     setCurrentReviewId(null);\n//   };\n\n//   // Create a new review\n//   const handleCreateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create review.');\n//       }\n//       const newReview = await response.json();\n//       setReviews([...reviews, newReview]);\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review added successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${currentReviewId}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to update review.');\n//       }\n//       const updatedReview = await response.json();\n//       setReviews(\n//         reviews.map((review) =>\n//           review._id === currentReviewId ? updatedReview : review\n//         )\n//       );\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review updated successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDeleteReview = async (id) => {\n//     if (!window.confirm('Are you sure you want to delete this review?')) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Failed to delete review.');\n//       }\n//       setReviews(reviews.filter((review) => review._id !== id));\n//       setMessage({ type: 'success', text: 'Review deleted successfully.' });\n//     } catch (error) {\n//       console.error('Error deleting review:', error); // Log the full error for debugging\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Set review data for editing\n//   const handleEditReview = (review) => {\n//     setEditMode(true);\n//     setCurrentReviewId(review._id);\n//     setFormData({\n//       userId: review.userId || '',\n//       foodItemId: review.foodItemId || '',\n//       rating: review.rating || '',\n//       review: review.review || '',\n//     });\n//     window.scrollTo({ top: 0, behavior: 'smooth' });\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-5\">\n//       <div className=\"container\">\n//         <h2 className=\"mb-4\">User Reviews</h2>\n\n//         {/* Alert Message */}\n//         {message.text && (\n//           <div className={`alert alert-${message.type}`} role=\"alert\">\n//             {message.text}\n//           </div>\n//         )}\n\n//         {/* Review Form */}\n//         <form\n//           onSubmit={editMode ? handleUpdateReview : handleCreateReview}\n//           className=\"mb-5\"\n//         >\n//           <div className=\"row g-3\">\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"userId\" className=\"form-label\">\n//                 User ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"userId\"\n//                 name=\"userId\"\n//                 value={formData.userId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"foodItemId\" className=\"form-label\">\n//                 Food Item ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"foodItemId\"\n//                 name=\"foodItemId\"\n//                 value={formData.foodItemId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-2\">\n//               <label htmlFor=\"rating\" className=\"form-label\">\n//                 Rating\n//               </label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 id=\"rating\"\n//                 name=\"rating\"\n//                 min=\"1\"\n//                 max=\"5\"\n//                 value={formData.rating}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-4\">\n//               <label htmlFor=\"review\" className=\"form-label\">\n//                 Review\n//               </label>\n//               <textarea\n//                 className=\"form-control\"\n//                 id=\"review\"\n//                 name=\"review\"\n//                 rows=\"1\"\n//                 value={formData.review}\n//                 onChange={handleInputChange}\n//                 required\n//               ></textarea>\n//             </div>\n//           </div>\n//           <div className=\"mt-3\">\n//             <button\n//               type=\"submit\"\n//               className={`btn ${editMode ? 'btn-warning' : 'btn-success'}`}\n//               disabled={loading}\n//             >\n//               {loading\n//                 ? 'Processing...'\n//                 : editMode\n//                 ? 'Update Review'\n//                 : 'Submit Review'}\n//             </button>\n//             {editMode && (\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary ms-2\"\n//                 onClick={resetForm}\n//                 disabled={loading}\n//               >\n//                 Cancel\n//               </button>\n//             )}\n//           </div>\n//         </form>\n\n//         {/* Reviews List */}\n//         <div>\n//           {loading ? (\n//             <div className=\"text-center\">\n//               <div\n//                 className=\"spinner-border text-light\"\n//                 role=\"status\"\n//               ></div>\n//               <span className=\"ms-2\">Loading Reviews...</span>\n//             </div>\n//           ) : reviews.length > 0 ? (\n//             <div className=\"row\">\n//               {reviews.map((review) => (\n//                 <div className=\"col-md-6 mb-4\" key={review._id}>\n//                   <div className=\"card bg-secondary text-light\">\n//                     <div className=\"card-body\">\n//                       <h5 className=\"card-title\">\n//                         User: {review.userId} | Food Item: {review.foodItemId}\n//                       </h5>\n//                       <h6 className=\"card-subtitle mb-2 text-warning\">\n//                         Rating: {review.rating}/5\n//                       </h6>\n//                       <p className=\"card-text\">{review.review}</p>\n//                       <button\n//                         className=\"btn btn-primary me-2\"\n//                         onClick={() => handleEditReview(review)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger\"\n//                         onClick={() => handleDeleteReview(review._id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <p>No reviews available.</p>\n//           )}\n//         </div>\n\n//         {/* Footer Note */}\n//         <div className=\"text-center mt-5\">\n//           <span className=\"text-muted\">Â© 2024 <i>GoFood</i>, Inc</span>\n//         </div>\n\n//       </div>\n//     </footer>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Footer() {\n  _s();\n  const [formData, setFormData] = useState({\n    userId: '',\n    foodItemId: '',\n    rating: '',\n    review: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({\n    type: '',\n    text: ''\n  });\n  const apiUrl = 'http://localhost:5000/api/reviews';\n\n  // Handle input change\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Validate form data\n  const validateForm = () => {\n    const {\n      userId,\n      foodItemId,\n      rating,\n      review\n    } = formData;\n    if (!userId || !foodItemId || !rating || !review) {\n      setMessage({\n        type: 'warning',\n        text: 'Please fill in all fields.'\n      });\n      return false;\n    }\n    if (rating < 1 || rating > 5) {\n      setMessage({\n        type: 'warning',\n        text: 'Rating must be between 1 and 5.'\n      });\n      return false;\n    }\n    return true;\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setFormData({\n      userId: '',\n      foodItemId: '',\n      rating: '',\n      review: ''\n    });\n  };\n\n  // Create a new review\n  const handleCreateReview = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create review.');\n      }\n      resetForm();\n      setMessage({\n        type: 'success',\n        text: 'Review added successfully.'\n      });\n    } catch (error) {\n      setMessage({\n        type: 'danger',\n        text: error.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    className: \"bg-dark text-light py-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mb-4\",\n        children: \"Submit Your Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `alert alert-${message.type}`,\n        role: \"alert\",\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCreateReview,\n        className: \"mb-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row g-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"userId\",\n              className: \"form-label\",\n              children: \"User ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"userId\",\n              name: \"userId\",\n              value: formData.userId,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"foodItemId\",\n              className: \"form-label\",\n              children: \"Food Item ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"foodItemId\",\n              name: \"foodItemId\",\n              value: formData.foodItemId,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"rating\",\n              className: \"form-label\",\n              children: \"Rating\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"form-control\",\n              id: \"rating\",\n              name: \"rating\",\n              min: \"1\",\n              max: \"5\",\n              value: formData.rating,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"review\",\n              className: \"form-label\",\n              children: \"Review\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              id: \"review\",\n              name: \"review\",\n              rows: \"1\",\n              value: formData.review,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-success\",\n            disabled: loading,\n            children: loading ? 'Processing...' : 'Submit Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-muted\",\n          children: [\"\\xA9 2024 \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"GoFood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 47\n          }, this), \", Inc\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n}\n_s(Footer, \"ejUVEK6gHL+zg3upY5T3fxoIX0o=\");\n_c = Footer;\nvar _c;\n$RefreshReg$(_c, \"Footer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Footer","_s","formData","setFormData","userId","foodItemId","rating","review","loading","setLoading","message","setMessage","type","text","apiUrl","handleInputChange","e","name","value","target","validateForm","resetForm","handleCreateReview","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","role","onSubmit","htmlFor","id","onChange","required","min","max","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/components/Footer.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n\n// export default function Footer() {\n//   <footer className=\"bg-dark text-light py-5\">\n//   <div className=\"container\">\n//     {/* Your existing Footer content */}\n//     {/* Footer Note */}\n//     <div className=\"text-center mt-5\">\n//       <span className=\"text-muted\">Â© 2024 GoFood, Inc</span>\n//     </div>\n//   </div>\n// </footer>\n//   const [reviews, setReviews] = useState([]);\n//   const [formData, setFormData] = useState({\n//     userId: '',\n//     foodItemId: '',\n//     rating: '',\n//     review: '',\n//   });\n//   const [editMode, setEditMode] = useState(false);\n//   const [currentReviewId, setCurrentReviewId] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState({ type: '', text: '' });\n\n//   const apiUrl = 'http://localhost:5000/api/reviews';\n\n//   // Fetch all reviews\n//   const fetchReviews = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.status} ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Handle input change\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Validate form data\n//   const validateForm = () => {\n//     const { userId, foodItemId, rating, review } = formData;\n//     if (!userId || !foodItemId || !rating || !review) {\n//       setMessage({ type: 'warning', text: 'Please fill in all fields.' });\n//       return false;\n//     }\n//     if (rating < 1 || rating > 5) {\n//       setMessage({ type: 'warning', text: 'Rating must be between 1 and 5.' });\n//       return false;\n//     }\n//     return true;\n//   };\n\n//   // Reset form\n//   const resetForm = () => {\n//     setFormData({\n//       userId: '',\n//       foodItemId: '',\n//       rating: '',\n//       review: '',\n//     });\n//     setEditMode(false);\n//     setCurrentReviewId(null);\n//   };\n\n//   // Create a new review\n//   const handleCreateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create review.');\n//       }\n//       const newReview = await response.json();\n//       setReviews([...reviews, newReview]);\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review added successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${currentReviewId}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to update review.');\n//       }\n//       const updatedReview = await response.json();\n//       setReviews(\n//         reviews.map((review) =>\n//           review._id === currentReviewId ? updatedReview : review\n//         )\n//       );\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review updated successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDeleteReview = async (id) => {\n//     if (!window.confirm('Are you sure you want to delete this review?')) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Failed to delete review.');\n//       }\n//       setReviews(reviews.filter((review) => review._id !== id));\n//       setMessage({ type: 'success', text: 'Review deleted successfully.' });\n//     } catch (error) {\n//       console.error('Error deleting review:', error); // Log the full error for debugging\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Set review data for editing\n//   const handleEditReview = (review) => {\n//     setEditMode(true);\n//     setCurrentReviewId(review._id);\n//     setFormData({\n//       userId: review.userId || '',\n//       foodItemId: review.foodItemId || '',\n//       rating: review.rating || '',\n//       review: review.review || '',\n//     });\n//     window.scrollTo({ top: 0, behavior: 'smooth' });\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-5\">\n//       <div className=\"container\">\n//         <h2 className=\"mb-4\">User Reviews</h2>\n\n//         {/* Alert Message */}\n//         {message.text && (\n//           <div className={`alert alert-${message.type}`} role=\"alert\">\n//             {message.text}\n//           </div>\n//         )}\n\n//         {/* Review Form */}\n//         <form\n//           onSubmit={editMode ? handleUpdateReview : handleCreateReview}\n//           className=\"mb-5\"\n//         >\n//           <div className=\"row g-3\">\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"userId\" className=\"form-label\">\n//                 User ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"userId\"\n//                 name=\"userId\"\n//                 value={formData.userId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"foodItemId\" className=\"form-label\">\n//                 Food Item ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"foodItemId\"\n//                 name=\"foodItemId\"\n//                 value={formData.foodItemId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-2\">\n//               <label htmlFor=\"rating\" className=\"form-label\">\n//                 Rating\n//               </label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 id=\"rating\"\n//                 name=\"rating\"\n//                 min=\"1\"\n//                 max=\"5\"\n//                 value={formData.rating}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-4\">\n//               <label htmlFor=\"review\" className=\"form-label\">\n//                 Review\n//               </label>\n//               <textarea\n//                 className=\"form-control\"\n//                 id=\"review\"\n//                 name=\"review\"\n//                 rows=\"1\"\n//                 value={formData.review}\n//                 onChange={handleInputChange}\n//                 required\n//               ></textarea>\n//             </div>\n//           </div>\n//           <div className=\"mt-3\">\n//             <button\n//               type=\"submit\"\n//               className={`btn ${editMode ? 'btn-warning' : 'btn-success'}`}\n//               disabled={loading}\n//             >\n//               {loading\n//                 ? 'Processing...'\n//                 : editMode\n//                 ? 'Update Review'\n//                 : 'Submit Review'}\n//             </button>\n//             {editMode && (\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary ms-2\"\n//                 onClick={resetForm}\n//                 disabled={loading}\n//               >\n//                 Cancel\n//               </button>\n//             )}\n//           </div>\n//         </form>\n\n//         {/* Reviews List */}\n//         <div>\n//           {loading ? (\n//             <div className=\"text-center\">\n//               <div\n//                 className=\"spinner-border text-light\"\n//                 role=\"status\"\n//               ></div>\n//               <span className=\"ms-2\">Loading Reviews...</span>\n//             </div>\n//           ) : reviews.length > 0 ? (\n//             <div className=\"row\">\n//               {reviews.map((review) => (\n//                 <div className=\"col-md-6 mb-4\" key={review._id}>\n//                   <div className=\"card bg-secondary text-light\">\n//                     <div className=\"card-body\">\n//                       <h5 className=\"card-title\">\n//                         User: {review.userId} | Food Item: {review.foodItemId}\n//                       </h5>\n//                       <h6 className=\"card-subtitle mb-2 text-warning\">\n//                         Rating: {review.rating}/5\n//                       </h6>\n//                       <p className=\"card-text\">{review.review}</p>\n//                       <button\n//                         className=\"btn btn-primary me-2\"\n//                         onClick={() => handleEditReview(review)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger\"\n//                         onClick={() => handleDeleteReview(review._id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <p>No reviews available.</p>\n//           )}\n//         </div>\n      \n//         {/* Footer Note */}\n//         <div className=\"text-center mt-5\">\n//           <span className=\"text-muted\">Â© 2024 <i>GoFood</i>, Inc</span>\n//         </div>\n\n//       </div>\n//     </footer>\n//   );\n// }\n\n\nimport React, { useState } from 'react';\n\nexport default function Footer() {\n  const [formData, setFormData] = useState({\n    userId: '',\n    foodItemId: '',\n    rating: '',\n    review: '',\n  });\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({ type: '', text: '' });\n\n  const apiUrl = 'http://localhost:5000/api/reviews';\n\n  // Handle input change\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  // Validate form data\n  const validateForm = () => {\n    const { userId, foodItemId, rating, review } = formData;\n    if (!userId || !foodItemId || !rating || !review) {\n      setMessage({ type: 'warning', text: 'Please fill in all fields.' });\n      return false;\n    }\n    if (rating < 1 || rating > 5) {\n      setMessage({ type: 'warning', text: 'Rating must be between 1 and 5.' });\n      return false;\n    }\n    return true;\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setFormData({\n      userId: '',\n      foodItemId: '',\n      rating: '',\n      review: '',\n    });\n  };\n\n  // Create a new review\n  const handleCreateReview = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create review.');\n      }\n      resetForm();\n      setMessage({ type: 'success', text: 'Review added successfully.' });\n    } catch (error) {\n      setMessage({ type: 'danger', text: error.message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <footer className=\"bg-dark text-light py-5\">\n      <div className=\"container\">\n        <h2 className=\"mb-4\">Submit Your Review</h2>\n\n        {/* Alert Message */}\n        {message.text && (\n          <div className={`alert alert-${message.type}`} role=\"alert\">\n            {message.text}\n          </div>\n        )}\n\n        {/* Review Form */}\n        <form onSubmit={handleCreateReview} className=\"mb-5\">\n          <div className=\"row g-3\">\n            <div className=\"col-md-3\">\n              <label htmlFor=\"userId\" className=\"form-label\">\n                User ID\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"userId\"\n                name=\"userId\"\n                value={formData.userId}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"col-md-3\">\n              <label htmlFor=\"foodItemId\" className=\"form-label\">\n                Food Item ID\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"foodItemId\"\n                name=\"foodItemId\"\n                value={formData.foodItemId}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"col-md-2\">\n              <label htmlFor=\"rating\" className=\"form-label\">\n                Rating\n              </label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"rating\"\n                name=\"rating\"\n                min=\"1\"\n                max=\"5\"\n                value={formData.rating}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"col-md-4\">\n              <label htmlFor=\"review\" className=\"form-label\">\n                Review\n              </label>\n              <textarea\n                className=\"form-control\"\n                id=\"review\"\n                name=\"review\"\n                rows=\"1\"\n                value={formData.review}\n                onChange={handleInputChange}\n                required\n              ></textarea>\n            </div>\n          </div>\n          <div className=\"mt-3\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-success\"\n              disabled={loading}\n            >\n              {loading ? 'Processing...' : 'Submit Review'}\n            </button>\n          </div>\n        </form>\n\n        {/* Footer Note */}\n        <div className=\"text-center mt-5\">\n          <span className=\"text-muted\">Â© 2024 <i>GoFood</i>, Inc</span>\n        </div>\n      </div>\n    </footer>\n  );\n}\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
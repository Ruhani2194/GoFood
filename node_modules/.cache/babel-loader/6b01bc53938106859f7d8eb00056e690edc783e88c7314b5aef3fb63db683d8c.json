{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruhan\\\\Documents\\\\gofood\\\\mernapp\\\\src\\\\screens\\\\Login.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState } from 'react';\n// // // import Navbar from '../components/Navbar';\n// // // import { useNavigate, Link } from 'react-router-dom';\n\n// // // export default function Login() {\n// // //   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n// // //   const navigate = useNavigate();\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n\n// // //     try {\n// // //       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n// // //         method: 'POST',\n// // //         headers: {\n// // //           'Content-Type': 'application/json',\n// // //         },\n// // //         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n// // //       });\n\n// // //       const json = await response.json();\n// // //       console.log(json);\n\n// // //       if (json.success) {\n// // //         // Store the token and email in local storage\n// // //         localStorage.setItem(\"authToken\", json.authToken);\n// // //         localStorage.setItem(\"userEmail\", credentials.email);\n\n// // //         // Navigate to the home page upon successful login\n// // //         navigate(\"/\");\n// // //       } else {\n// // //         alert(\"Invalid credentials. Please try again.\");\n// // //       }\n// // //     } catch (error) {\n// // //       console.error('Error during login:', error);\n// // //       alert(\"Something went wrong. Please try again later.\");\n// // //     }\n// // //   };\n\n// // //   const onChange = (e) => {\n// // //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// // //   };\n\n// // //   return (\n// // //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n// // //       <Navbar />\n// // //       <div className='container'>\n// // //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n// // //             <input\n// // //               type=\"email\"\n// // //               className=\"form-control\"\n// // //               name='email'\n// // //               value={credentials.email}\n// // //               onChange={onChange}\n// // //               aria-describedby=\"emailHelp\"\n// // //               required\n// // //             />\n// // //             <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone.</div>\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n// // //             <input\n// // //               type=\"password\"\n// // //               className=\"form-control\"\n// // //               name='password'\n// // //               value={credentials.password}\n// // //               onChange={onChange}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// // //           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n// // import React, { useState } from 'react';\n// // import { useNavigate, Link } from 'react-router-dom';\n// // import Navbar from '../components/Navbar';\n\n// // export default function Login() {\n// //   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n// //   const navigate = useNavigate();\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n// //       });\n\n// //       const json = await response.json();\n\n// //       if (json.success) {\n// //         // Store the token and email in local storage\n// //         localStorage.setItem(\"authToken\", json.authToken);\n// //         localStorage.setItem(\"userEmail\", credentials.email);\n\n// //         // If user is admin, navigate to an admin page\n// //         const user = await fetchUserData(credentials.email); // Fetch user data to check if admin\n// //         if (user.role === 'admin') {\n// //           navigate(\"/admin/upload\"); // Assuming an admin upload page exists\n// //         } else {\n// //           navigate(\"/\"); // Otherwise, navigate to the home page\n// //         }\n// //       } else {\n// //         alert(\"Invalid credentials. Please try again.\");\n// //       }\n// //     } catch (error) {\n// //       console.error('Error during login:', error);\n// //       alert(\"Something went wrong. Please try again later.\");\n// //     }\n// //   };\n\n// //   const fetchUserData = async (email) => {\n// //     const response = await fetch(`http://localhost:5000/api/getUserByEmail/${email}`);\n// //     const data = await response.json();\n// //     return data;\n// //   };\n\n// //   const onChange = (e) => {\n// //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// //   };\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n// //       <Navbar />\n// //       <div className='container'>\n// //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n// //             <input\n// //               type=\"email\"\n// //               className=\"form-control\"\n// //               name='email'\n// //               value={credentials.email}\n// //               onChange={onChange}\n// //               aria-describedby=\"emailHelp\"\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n// //             <input\n// //               type=\"password\"\n// //               className=\"form-control\"\n// //               name='password'\n// //               value={credentials.password}\n// //               onChange={onChange}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// //           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import Navbar from '../components/Navbar';\n\n// export default function Login() {\n//   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n//       });\n\n//       const json = await response.json();\n\n//       if (json.success) {\n//         // Store the token and user data in local storage\n//         localStorage.setItem(\"authToken\", json.authToken);\n//         localStorage.setItem(\"userEmail\", credentials.email);\n\n//         // Check the user role from the response\n//         if (json.role === 'admin') {\n//           navigate(\"/admin-dashboard\");  // Redirect to admin dashboard if the role is admin\n//         } else {\n//           navigate(\"/\");  // Redirect to home page for regular users\n//         }\n//       } else {\n//         alert(\"Invalid credentials. Please try again.\");\n//       }\n//     } catch (error) {\n//       console.error('Error during login:', error);\n//       alert(\"Something went wrong. Please try again later.\");\n//     }\n//   };\n\n//   const onChange = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n//       <Navbar />\n//       <div className='container'>\n//         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               name='email'\n//               value={credentials.email}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               name='password'\n//               value={credentials.password}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n//           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate instead of useHistory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false); // Add a flag for admin check\n  const navigate = useNavigate(); // Initialize useNavigate hook\n\n  // Handle input changes for email and password\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n  };\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n\n  // Handle admin toggle (for example, checkbox or selection)\n  const handleAdminToggle = () => {\n    setIsAdmin(!isAdmin); // Toggle admin state (this could be a selection in your form)\n  };\n\n  // Submit login form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    // Create the login request body\n    const requestData = {\n      email,\n      password\n    };\n\n    // Determine the login endpoint based on whether the user is an admin or not\n    const url = isAdmin ? 'http://localhost:5000/api/admin/admin-login' : 'http://localhost:5000/api/loginuser';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n\n      // Check if the login was successful\n      if (response.ok) {\n        // Save the token in localStorage for future requests\n        localStorage.setItem('authToken', data.token);\n        // Redirect to the appropriate page based on user type\n        if (isAdmin) {\n          navigate('/admin-dashboard'); // Admin dashboard\n        } else {\n          navigate('/'); // User dashboard\n        }\n      } else {\n        setError(data.error || 'Login failed. Please check your credentials.');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again later.');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAdmin ? 'Admin Login' : 'User Login'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: email,\n          onChange: handleEmailChange,\n          required: true,\n          placeholder: \"Enter your email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: handlePasswordChange,\n          required: true,\n          placeholder: \"Enter your password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isAdmin,\n            onChange: handleAdminToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), ' ', \"Login as Admin\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Logging in...' : 'Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"/Lnkcyv2k+GSWk/kvH8Pl4bFdow=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","_s","email","setEmail","password","setPassword","error","setError","loading","setLoading","isAdmin","setIsAdmin","navigate","handleEmailChange","e","target","value","handlePasswordChange","handleAdminToggle","handleSubmit","preventDefault","requestData","url","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","token","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","placeholder","checked","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/screens/Login.js"],"sourcesContent":["// // // import React, { useState } from 'react';\n// // // import Navbar from '../components/Navbar';\n// // // import { useNavigate, Link } from 'react-router-dom';\n\n// // // export default function Login() {\n// // //   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n// // //   const navigate = useNavigate();\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n\n// // //     try {\n// // //       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n// // //         method: 'POST',\n// // //         headers: {\n// // //           'Content-Type': 'application/json',\n// // //         },\n// // //         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n// // //       });\n\n// // //       const json = await response.json();\n// // //       console.log(json);\n\n// // //       if (json.success) {\n// // //         // Store the token and email in local storage\n// // //         localStorage.setItem(\"authToken\", json.authToken);\n// // //         localStorage.setItem(\"userEmail\", credentials.email);\n\n// // //         // Navigate to the home page upon successful login\n// // //         navigate(\"/\");\n// // //       } else {\n// // //         alert(\"Invalid credentials. Please try again.\");\n// // //       }\n// // //     } catch (error) {\n// // //       console.error('Error during login:', error);\n// // //       alert(\"Something went wrong. Please try again later.\");\n// // //     }\n// // //   };\n\n// // //   const onChange = (e) => {\n// // //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// // //   };\n\n// // //   return (\n// // //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n// // //       <Navbar />\n// // //       <div className='container'>\n// // //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n// // //             <input\n// // //               type=\"email\"\n// // //               className=\"form-control\"\n// // //               name='email'\n// // //               value={credentials.email}\n// // //               onChange={onChange}\n// // //               aria-describedby=\"emailHelp\"\n// // //               required\n// // //             />\n// // //             <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone.</div>\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n// // //             <input\n// // //               type=\"password\"\n// // //               className=\"form-control\"\n// // //               name='password'\n// // //               value={credentials.password}\n// // //               onChange={onChange}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// // //           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n\n// // import React, { useState } from 'react';\n// // import { useNavigate, Link } from 'react-router-dom';\n// // import Navbar from '../components/Navbar';\n\n// // export default function Login() {\n// //   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n// //   const navigate = useNavigate();\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n// //       });\n\n// //       const json = await response.json();\n\n// //       if (json.success) {\n// //         // Store the token and email in local storage\n// //         localStorage.setItem(\"authToken\", json.authToken);\n// //         localStorage.setItem(\"userEmail\", credentials.email);\n\n// //         // If user is admin, navigate to an admin page\n// //         const user = await fetchUserData(credentials.email); // Fetch user data to check if admin\n// //         if (user.role === 'admin') {\n// //           navigate(\"/admin/upload\"); // Assuming an admin upload page exists\n// //         } else {\n// //           navigate(\"/\"); // Otherwise, navigate to the home page\n// //         }\n// //       } else {\n// //         alert(\"Invalid credentials. Please try again.\");\n// //       }\n// //     } catch (error) {\n// //       console.error('Error during login:', error);\n// //       alert(\"Something went wrong. Please try again later.\");\n// //     }\n// //   };\n\n// //   const fetchUserData = async (email) => {\n// //     const response = await fetch(`http://localhost:5000/api/getUserByEmail/${email}`);\n// //     const data = await response.json();\n// //     return data;\n// //   };\n\n// //   const onChange = (e) => {\n// //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// //   };\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n// //       <Navbar />\n// //       <div className='container'>\n// //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n// //             <input\n// //               type=\"email\"\n// //               className=\"form-control\"\n// //               name='email'\n// //               value={credentials.email}\n// //               onChange={onChange}\n// //               aria-describedby=\"emailHelp\"\n// //               required\n// //             />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n// //             <input\n// //               type=\"password\"\n// //               className=\"form-control\"\n// //               name='password'\n// //               value={credentials.password}\n// //               onChange={onChange}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// //           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import Navbar from '../components/Navbar';\n\n// export default function Login() {\n//   const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n  \n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/loginuser\", {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: credentials.email, password: credentials.password }),\n//       });\n      \n//       const json = await response.json();\n  \n//       if (json.success) {\n//         // Store the token and user data in local storage\n//         localStorage.setItem(\"authToken\", json.authToken);\n//         localStorage.setItem(\"userEmail\", credentials.email);\n  \n//         // Check the user role from the response\n//         if (json.role === 'admin') {\n//           navigate(\"/admin-dashboard\");  // Redirect to admin dashboard if the role is admin\n//         } else {\n//           navigate(\"/\");  // Redirect to home page for regular users\n//         }\n//       } else {\n//         alert(\"Invalid credentials. Please try again.\");\n//       }\n//     } catch (error) {\n//       console.error('Error during login:', error);\n//       alert(\"Something went wrong. Please try again later.\");\n//     }\n//   };\n  \n//   const onChange = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', height: '100vh', backgroundSize: 'cover' }}>\n//       <Navbar />\n//       <div className='container'>\n//         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               name='email'\n//               value={credentials.email}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               name='password'\n//               value={credentials.password}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n//           <Link to=\"/signup\" className=\"m-3 mx-1 btn btn-danger\">I'm a new user</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';  // Import useNavigate instead of useHistory\n\nconst Login = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);  // Add a flag for admin check\n  const navigate = useNavigate();  // Initialize useNavigate hook\n\n  // Handle input changes for email and password\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  };\n\n  // Handle admin toggle (for example, checkbox or selection)\n  const handleAdminToggle = () => {\n    setIsAdmin(!isAdmin);  // Toggle admin state (this could be a selection in your form)\n  };\n\n  // Submit login form\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n    setError('');\n\n    // Create the login request body\n    const requestData = {\n      email,\n      password\n    };\n\n    // Determine the login endpoint based on whether the user is an admin or not\n    const url = isAdmin \n      ? 'http://localhost:5000/api/admin/admin-login' \n      : 'http://localhost:5000/api/loginuser';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestData),\n      });\n\n      const data = await response.json();\n\n      // Check if the login was successful\n      if (response.ok) {\n        // Save the token in localStorage for future requests\n        localStorage.setItem('authToken', data.token);\n        // Redirect to the appropriate page based on user type\n        if (isAdmin) {\n          navigate('/admin-dashboard'); // Admin dashboard\n        } else {\n          navigate('/'); // User dashboard\n        }\n      } else {\n        setError(data.error || 'Login failed. Please check your credentials.');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again later.');\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h2>{isAdmin ? 'Admin Login' : 'User Login'}</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={handleEmailChange}\n            required\n            placeholder=\"Enter your email\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n            required\n            placeholder=\"Enter your password\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isAdmin}\n              onChange={handleAdminToggle}\n            />\n            {' '}Login as Admin\n          </label>\n        </div>\n\n        {error && <p className=\"error-message\">{error}</p>}\n\n        <button type=\"submit\" disabled={loading}>\n          {loading ? 'Logging in...' : 'Login'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,k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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
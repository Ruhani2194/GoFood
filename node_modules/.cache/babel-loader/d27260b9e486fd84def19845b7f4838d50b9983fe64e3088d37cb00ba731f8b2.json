{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n\n// export default function Footer() {\n//   <footer className=\"bg-dark text-light py-5\">\n//   <div className=\"container\">\n//     {/* Your existing Footer content */}\n//     {/* Footer Note */}\n//     <div className=\"text-center mt-5\">\n//       <span className=\"text-muted\">Â© 2024 GoFood, Inc</span>\n//     </div>\n//   </div>\n// </footer>\n//   const [reviews, setReviews] = useState([]);\n//   const [formData, setFormData] = useState({\n//     userId: '',\n//     foodItemId: '',\n//     rating: '',\n//     review: '',\n//   });\n//   const [editMode, setEditMode] = useState(false);\n//   const [currentReviewId, setCurrentReviewId] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState({ type: '', text: '' });\n\n//   const apiUrl = 'http://localhost:5000/api/reviews';\n\n//   // Fetch all reviews\n//   const fetchReviews = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.status} ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Handle input change\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Validate form data\n//   const validateForm = () => {\n//     const { userId, foodItemId, rating, review } = formData;\n//     if (!userId || !foodItemId || !rating || !review) {\n//       setMessage({ type: 'warning', text: 'Please fill in all fields.' });\n//       return false;\n//     }\n//     if (rating < 1 || rating > 5) {\n//       setMessage({ type: 'warning', text: 'Rating must be between 1 and 5.' });\n//       return false;\n//     }\n//     return true;\n//   };\n\n//   // Reset form\n//   const resetForm = () => {\n//     setFormData({\n//       userId: '',\n//       foodItemId: '',\n//       rating: '',\n//       review: '',\n//     });\n//     setEditMode(false);\n//     setCurrentReviewId(null);\n//   };\n\n//   // Create a new review\n//   const handleCreateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create review.');\n//       }\n//       const newReview = await response.json();\n//       setReviews([...reviews, newReview]);\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review added successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${currentReviewId}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to update review.');\n//       }\n//       const updatedReview = await response.json();\n//       setReviews(\n//         reviews.map((review) =>\n//           review._id === currentReviewId ? updatedReview : review\n//         )\n//       );\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review updated successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDeleteReview = async (id) => {\n//     if (!window.confirm('Are you sure you want to delete this review?')) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Failed to delete review.');\n//       }\n//       setReviews(reviews.filter((review) => review._id !== id));\n//       setMessage({ type: 'success', text: 'Review deleted successfully.' });\n//     } catch (error) {\n//       console.error('Error deleting review:', error); // Log the full error for debugging\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Set review data for editing\n//   const handleEditReview = (review) => {\n//     setEditMode(true);\n//     setCurrentReviewId(review._id);\n//     setFormData({\n//       userId: review.userId || '',\n//       foodItemId: review.foodItemId || '',\n//       rating: review.rating || '',\n//       review: review.review || '',\n//     });\n//     window.scrollTo({ top: 0, behavior: 'smooth' });\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-5\">\n//       <div className=\"container\">\n//         <h2 className=\"mb-4\">User Reviews</h2>\n\n//         {/* Alert Message */}\n//         {message.text && (\n//           <div className={`alert alert-${message.type}`} role=\"alert\">\n//             {message.text}\n//           </div>\n//         )}\n\n//         {/* Review Form */}\n//         <form\n//           onSubmit={editMode ? handleUpdateReview : handleCreateReview}\n//           className=\"mb-5\"\n//         >\n//           <div className=\"row g-3\">\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"userId\" className=\"form-label\">\n//                 User ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"userId\"\n//                 name=\"userId\"\n//                 value={formData.userId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"foodItemId\" className=\"form-label\">\n//                 Food Item ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"foodItemId\"\n//                 name=\"foodItemId\"\n//                 value={formData.foodItemId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-2\">\n//               <label htmlFor=\"rating\" className=\"form-label\">\n//                 Rating\n//               </label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 id=\"rating\"\n//                 name=\"rating\"\n//                 min=\"1\"\n//                 max=\"5\"\n//                 value={formData.rating}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-4\">\n//               <label htmlFor=\"review\" className=\"form-label\">\n//                 Review\n//               </label>\n//               <textarea\n//                 className=\"form-control\"\n//                 id=\"review\"\n//                 name=\"review\"\n//                 rows=\"1\"\n//                 value={formData.review}\n//                 onChange={handleInputChange}\n//                 required\n//               ></textarea>\n//             </div>\n//           </div>\n//           <div className=\"mt-3\">\n//             <button\n//               type=\"submit\"\n//               className={`btn ${editMode ? 'btn-warning' : 'btn-success'}`}\n//               disabled={loading}\n//             >\n//               {loading\n//                 ? 'Processing...'\n//                 : editMode\n//                 ? 'Update Review'\n//                 : 'Submit Review'}\n//             </button>\n//             {editMode && (\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary ms-2\"\n//                 onClick={resetForm}\n//                 disabled={loading}\n//               >\n//                 Cancel\n//               </button>\n//             )}\n//           </div>\n//         </form>\n\n//         {/* Reviews List */}\n//         <div>\n//           {loading ? (\n//             <div className=\"text-center\">\n//               <div\n//                 className=\"spinner-border text-light\"\n//                 role=\"status\"\n//               ></div>\n//               <span className=\"ms-2\">Loading Reviews...</span>\n//             </div>\n//           ) : reviews.length > 0 ? (\n//             <div className=\"row\">\n//               {reviews.map((review) => (\n//                 <div className=\"col-md-6 mb-4\" key={review._id}>\n//                   <div className=\"card bg-secondary text-light\">\n//                     <div className=\"card-body\">\n//                       <h5 className=\"card-title\">\n//                         User: {review.userId} | Food Item: {review.foodItemId}\n//                       </h5>\n//                       <h6 className=\"card-subtitle mb-2 text-warning\">\n//                         Rating: {review.rating}/5\n//                       </h6>\n//                       <p className=\"card-text\">{review.review}</p>\n//                       <button\n//                         className=\"btn btn-primary me-2\"\n//                         onClick={() => handleEditReview(review)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger\"\n//                         onClick={() => handleDeleteReview(review._id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <p>No reviews available.</p>\n//           )}\n//         </div>\n\n//         {/* Footer Note */}\n//         <div className=\"text-center mt-5\">\n//           <span className=\"text-muted\">Â© 2024 <i>GoFood</i>, Inc</span>\n//         </div>\n\n//       </div>\n//     </footer>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/components/Footer.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n\n// export default function Footer() {\n//   <footer className=\"bg-dark text-light py-5\">\n//   <div className=\"container\">\n//     {/* Your existing Footer content */}\n//     {/* Footer Note */}\n//     <div className=\"text-center mt-5\">\n//       <span className=\"text-muted\">Â© 2024 GoFood, Inc</span>\n//     </div>\n//   </div>\n// </footer>\n//   const [reviews, setReviews] = useState([]);\n//   const [formData, setFormData] = useState({\n//     userId: '',\n//     foodItemId: '',\n//     rating: '',\n//     review: '',\n//   });\n//   const [editMode, setEditMode] = useState(false);\n//   const [currentReviewId, setCurrentReviewId] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState({ type: '', text: '' });\n\n//   const apiUrl = 'http://localhost:5000/api/reviews';\n\n//   // Fetch all reviews\n//   const fetchReviews = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.status} ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       setReviews(data);\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchReviews();\n//   }, []);\n\n//   // Handle input change\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   // Validate form data\n//   const validateForm = () => {\n//     const { userId, foodItemId, rating, review } = formData;\n//     if (!userId || !foodItemId || !rating || !review) {\n//       setMessage({ type: 'warning', text: 'Please fill in all fields.' });\n//       return false;\n//     }\n//     if (rating < 1 || rating > 5) {\n//       setMessage({ type: 'warning', text: 'Rating must be between 1 and 5.' });\n//       return false;\n//     }\n//     return true;\n//   };\n\n//   // Reset form\n//   const resetForm = () => {\n//     setFormData({\n//       userId: '',\n//       foodItemId: '',\n//       rating: '',\n//       review: '',\n//     });\n//     setEditMode(false);\n//     setCurrentReviewId(null);\n//   };\n\n//   // Create a new review\n//   const handleCreateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create review.');\n//       }\n//       const newReview = await response.json();\n//       setReviews([...reviews, newReview]);\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review added successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Update an existing review\n//   const handleUpdateReview = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${currentReviewId}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to update review.');\n//       }\n//       const updatedReview = await response.json();\n//       setReviews(\n//         reviews.map((review) =>\n//           review._id === currentReviewId ? updatedReview : review\n//         )\n//       );\n//       resetForm();\n//       setMessage({ type: 'success', text: 'Review updated successfully.' });\n//     } catch (error) {\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Delete a review\n//   const handleDeleteReview = async (id) => {\n//     if (!window.confirm('Are you sure you want to delete this review?')) return;\n//     setLoading(true);\n//     try {\n//       const response = await fetch(`${apiUrl}/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.message || 'Failed to delete review.');\n//       }\n//       setReviews(reviews.filter((review) => review._id !== id));\n//       setMessage({ type: 'success', text: 'Review deleted successfully.' });\n//     } catch (error) {\n//       console.error('Error deleting review:', error); // Log the full error for debugging\n//       setMessage({ type: 'danger', text: error.message });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Set review data for editing\n//   const handleEditReview = (review) => {\n//     setEditMode(true);\n//     setCurrentReviewId(review._id);\n//     setFormData({\n//       userId: review.userId || '',\n//       foodItemId: review.foodItemId || '',\n//       rating: review.rating || '',\n//       review: review.review || '',\n//     });\n//     window.scrollTo({ top: 0, behavior: 'smooth' });\n//   };\n\n//   return (\n//     <footer className=\"bg-dark text-light py-5\">\n//       <div className=\"container\">\n//         <h2 className=\"mb-4\">User Reviews</h2>\n\n//         {/* Alert Message */}\n//         {message.text && (\n//           <div className={`alert alert-${message.type}`} role=\"alert\">\n//             {message.text}\n//           </div>\n//         )}\n\n//         {/* Review Form */}\n//         <form\n//           onSubmit={editMode ? handleUpdateReview : handleCreateReview}\n//           className=\"mb-5\"\n//         >\n//           <div className=\"row g-3\">\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"userId\" className=\"form-label\">\n//                 User ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"userId\"\n//                 name=\"userId\"\n//                 value={formData.userId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-3\">\n//               <label htmlFor=\"foodItemId\" className=\"form-label\">\n//                 Food Item ID\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 id=\"foodItemId\"\n//                 name=\"foodItemId\"\n//                 value={formData.foodItemId}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-2\">\n//               <label htmlFor=\"rating\" className=\"form-label\">\n//                 Rating\n//               </label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 id=\"rating\"\n//                 name=\"rating\"\n//                 min=\"1\"\n//                 max=\"5\"\n//                 value={formData.rating}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </div>\n//             <div className=\"col-md-4\">\n//               <label htmlFor=\"review\" className=\"form-label\">\n//                 Review\n//               </label>\n//               <textarea\n//                 className=\"form-control\"\n//                 id=\"review\"\n//                 name=\"review\"\n//                 rows=\"1\"\n//                 value={formData.review}\n//                 onChange={handleInputChange}\n//                 required\n//               ></textarea>\n//             </div>\n//           </div>\n//           <div className=\"mt-3\">\n//             <button\n//               type=\"submit\"\n//               className={`btn ${editMode ? 'btn-warning' : 'btn-success'}`}\n//               disabled={loading}\n//             >\n//               {loading\n//                 ? 'Processing...'\n//                 : editMode\n//                 ? 'Update Review'\n//                 : 'Submit Review'}\n//             </button>\n//             {editMode && (\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary ms-2\"\n//                 onClick={resetForm}\n//                 disabled={loading}\n//               >\n//                 Cancel\n//               </button>\n//             )}\n//           </div>\n//         </form>\n\n//         {/* Reviews List */}\n//         <div>\n//           {loading ? (\n//             <div className=\"text-center\">\n//               <div\n//                 className=\"spinner-border text-light\"\n//                 role=\"status\"\n//               ></div>\n//               <span className=\"ms-2\">Loading Reviews...</span>\n//             </div>\n//           ) : reviews.length > 0 ? (\n//             <div className=\"row\">\n//               {reviews.map((review) => (\n//                 <div className=\"col-md-6 mb-4\" key={review._id}>\n//                   <div className=\"card bg-secondary text-light\">\n//                     <div className=\"card-body\">\n//                       <h5 className=\"card-title\">\n//                         User: {review.userId} | Food Item: {review.foodItemId}\n//                       </h5>\n//                       <h6 className=\"card-subtitle mb-2 text-warning\">\n//                         Rating: {review.rating}/5\n//                       </h6>\n//                       <p className=\"card-text\">{review.review}</p>\n//                       <button\n//                         className=\"btn btn-primary me-2\"\n//                         onClick={() => handleEditReview(review)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-danger\"\n//                         onClick={() => handleDeleteReview(review._id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           ) : (\n//             <p>No reviews available.</p>\n//           )}\n//         </div>\n      \n//         {/* Footer Note */}\n//         <div className=\"text-center mt-5\">\n//           <span className=\"text-muted\">Â© 2024 <i>GoFood</i>, Inc</span>\n//         </div>\n\n//       </div>\n//     </footer>\n//   );\n// }\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
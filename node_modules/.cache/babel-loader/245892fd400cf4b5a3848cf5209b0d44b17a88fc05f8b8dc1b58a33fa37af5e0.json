{"ast":null,"code":"// import React, { useReducer, useContext, createContext } from 'react';\n\n// const CartStateContext = createContext();\n// const CartDispatchContext = createContext();\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case \"ADD\":\n//             return [...state, { id: action.id, name: action.name, qty: action.qty, size: action.size, price: action.price, img: action.img }]\n//         case \"REMOVE\":\n//             let newArr = [...state]\n//             newArr.splice(action.index, 1)\n//             return newArr;\n//         case \"DROP\":\n//             let empArray = []\n//             return empArray\n//         case \"UPDATE\":\n//             let arr = [...state]\n//             arr.find((food, index) => {\n//                 if (food.id === action.id) {\n//                     console.log(food.qty, parseInt(action.qty), action.price + food.price)\n//                     arr[index] = { ...food, qty: parseInt(action.qty) + food.qty, price: action.price + food.price }\n//                 }\n//                 return arr\n//             })\n//             return arr\n//         default:\n//             console.log(\"Error in Reducer\");\n//     }\n// };\n\n// export const CartProvider = ({ children }) => {\n//     const [state, dispatch] = useReducer(reducer, []);\n\n//     return (\n//         <CartDispatchContext.Provider value={dispatch}>\n//             <CartStateContext.Provider value={state}>\n//                 {children}\n//             </CartStateContext.Provider>\n//         </CartDispatchContext.Provider>\n//     )\n// };\n\n// export const useCart = () => useContext(CartStateContext);\n// export const useDispatchCart = () => useContext(CartDispatchContext);","map":{"version":3,"names":[],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/components/ContextReducer.js"],"sourcesContent":["// import React, { useReducer, useContext, createContext } from 'react';\r\n\r\n// const CartStateContext = createContext();\r\n// const CartDispatchContext = createContext();\r\n\r\n// const reducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case \"ADD\":\r\n//             return [...state, { id: action.id, name: action.name, qty: action.qty, size: action.size, price: action.price, img: action.img }]\r\n//         case \"REMOVE\":\r\n//             let newArr = [...state]\r\n//             newArr.splice(action.index, 1)\r\n//             return newArr;\r\n//         case \"DROP\":\r\n//             let empArray = []\r\n//             return empArray\r\n//         case \"UPDATE\":\r\n//             let arr = [...state]\r\n//             arr.find((food, index) => {\r\n//                 if (food.id === action.id) {\r\n//                     console.log(food.qty, parseInt(action.qty), action.price + food.price)\r\n//                     arr[index] = { ...food, qty: parseInt(action.qty) + food.qty, price: action.price + food.price }\r\n//                 }\r\n//                 return arr\r\n//             })\r\n//             return arr\r\n//         default:\r\n//             console.log(\"Error in Reducer\");\r\n//     }\r\n// };\r\n\r\n// export const CartProvider = ({ children }) => {\r\n//     const [state, dispatch] = useReducer(reducer, []);\r\n\r\n//     return (\r\n//         <CartDispatchContext.Provider value={dispatch}>\r\n//             <CartStateContext.Provider value={state}>\r\n//                 {children}\r\n//             </CartStateContext.Provider>\r\n//         </CartDispatchContext.Provider>\r\n//     )\r\n// };\r\n\r\n// export const useCart = () => useContext(CartStateContext);\r\n// export const useDispatchCart = () => useContext(CartDispatchContext);"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
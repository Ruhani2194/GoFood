{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const Login = () => {\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [isAdmin, setIsAdmin] = useState(false); \n//   const navigate = useNavigate();\n\n//   const handleEmailChange = (e) => setEmail(e.target.value);\n//   const handlePasswordChange = (e) => setPassword(e.target.value);\n//   const handleAdminToggle = () => setIsAdmin(!isAdmin);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setError('');\n\n//     const url = isAdmin\n//       ? 'http://localhost:5000/api/admin/admin-login'\n//       : 'http://localhost:5000/api/loginuser';\n\n//     try {\n//       const response = await fetch(url, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('authToken', data.token);\n//         localStorage.setItem('userRole', isAdmin ? 'admin' : 'user');\n//         navigate(isAdmin ? '/' : '/');\n//       } else {\n//         setError(data.error || 'Invalid email or password. Please try again.');\n//         setTimeout(() => setError(''), 3000); \n//       }\n//     } catch (err) {\n//       setError('An error occurred while logging in. Please try again.');\n//       setTimeout(() => setError(''), 3000); \n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         backgroundImage:\n//           'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")',\n//         backgroundSize: 'cover',\n//         height: '100vh',\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//       }}\n//     >\n//       <div className=\"container w-50 bg-dark text-light p-5 rounded border border-success\">\n//         <h2 className=\"text-center mb-4\">{isAdmin ? 'Admin Login' : 'User Login'}</h2>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"email\" className=\"form-label\">\n//               Email:\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               value={email}\n//               onChange={handleEmailChange}\n//               className=\"form-control\"\n//               placeholder=\"Enter your email\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"password\" className=\"form-label\">\n//               Password:\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               value={password}\n//               onChange={handlePasswordChange}\n//               className=\"form-control\"\n//               placeholder=\"Enter your password\"\n//               required\n//             />\n//           </div>\n//           <div className=\"form-check mb-3\">\n//             <input\n//               type=\"checkbox\"\n//               id=\"admin\"\n//               className=\"form-check-input\"\n//               checked={isAdmin}\n//               onChange={handleAdminToggle}\n//             />\n//             <label htmlFor=\"admin\" className=\"form-check-label\">\n//               Login as Admin\n//             </label>\n//           </div>\n//           {error && <p className=\"text-danger text-center\">{error}</p>}\n//           <button type=\"submit\" className=\"btn btn-success w-100 mb-3\" disabled={loading}>\n//             {loading ? 'Logging in...' : 'Login'}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nrouter.post('/loginuser', [body('email').isEmail().withMessage('Please enter a valid email address'), body('password', 'Password is required').exists().withMessage('Password is required')], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    let user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(400).json({\n        error: 'Invalid credentials'\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        error: 'Invalid credentials'\n      });\n    }\n    const payload = {\n      user: {\n        id: user.id,\n        role: user.role\n      }\n    };\n    const authToken = jwt.sign(payload, jwtSecret, {\n      expiresIn: '1h'\n    });\n    console.log(authToken);\n    res.json({\n      success: true,\n      authToken,\n      role: user.role,\n      userData: user\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});","map":{"version":3,"names":["router","post","body","isEmail","withMessage","exists","req","res","errors","validationResult","isEmpty","status","json","array","email","password","user","User","findOne","error","isMatch","bcrypt","compare","payload","id","role","authToken","jwt","sign","jwtSecret","expiresIn","console","log","success","userData","message"],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/screens/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const Login = () => {\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [isAdmin, setIsAdmin] = useState(false); \n//   const navigate = useNavigate();\n\n//   const handleEmailChange = (e) => setEmail(e.target.value);\n//   const handlePasswordChange = (e) => setPassword(e.target.value);\n//   const handleAdminToggle = () => setIsAdmin(!isAdmin);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setError('');\n\n//     const url = isAdmin\n//       ? 'http://localhost:5000/api/admin/admin-login'\n//       : 'http://localhost:5000/api/loginuser';\n\n//     try {\n//       const response = await fetch(url, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         localStorage.setItem('authToken', data.token);\n//         localStorage.setItem('userRole', isAdmin ? 'admin' : 'user');\n//         navigate(isAdmin ? '/' : '/');\n//       } else {\n//         setError(data.error || 'Invalid email or password. Please try again.');\n//         setTimeout(() => setError(''), 3000); \n//       }\n//     } catch (err) {\n//       setError('An error occurred while logging in. Please try again.');\n//       setTimeout(() => setError(''), 3000); \n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         backgroundImage:\n//           'url(\"https://images.pexels.com/photos/326278/pexels-photo-326278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")',\n//         backgroundSize: 'cover',\n//         height: '100vh',\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//       }}\n//     >\n//       <div className=\"container w-50 bg-dark text-light p-5 rounded border border-success\">\n//         <h2 className=\"text-center mb-4\">{isAdmin ? 'Admin Login' : 'User Login'}</h2>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"email\" className=\"form-label\">\n//               Email:\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               value={email}\n//               onChange={handleEmailChange}\n//               className=\"form-control\"\n//               placeholder=\"Enter your email\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"password\" className=\"form-label\">\n//               Password:\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               value={password}\n//               onChange={handlePasswordChange}\n//               className=\"form-control\"\n//               placeholder=\"Enter your password\"\n//               required\n//             />\n//           </div>\n//           <div className=\"form-check mb-3\">\n//             <input\n//               type=\"checkbox\"\n//               id=\"admin\"\n//               className=\"form-check-input\"\n//               checked={isAdmin}\n//               onChange={handleAdminToggle}\n//             />\n//             <label htmlFor=\"admin\" className=\"form-check-label\">\n//               Login as Admin\n//             </label>\n//           </div>\n//           {error && <p className=\"text-danger text-center\">{error}</p>}\n//           <button type=\"submit\" className=\"btn btn-success w-100 mb-3\" disabled={loading}>\n//             {loading ? 'Logging in...' : 'Login'}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\n\nrouter.post('/loginuser', [\n  body('email').isEmail().withMessage('Please enter a valid email address'),\n  body('password', 'Password is required').exists().withMessage('Password is required')\n], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  const { email, password } = req.body;\n\n  try {\n    let user = await User.findOne({ email });\n    if (!user) {\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    const payload = {\n      user: { id: user.id, role: user.role }\n    };\n\n    const authToken = jwt.sign(payload, jwtSecret, { expiresIn: '1h' });\n    console.log(authToken);\n    \n    res.json({\n      success: true,\n      authToken,\n      role: user.role,\n      userData: user\n    });\n\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n"],"mappingsxBC,IAAI,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,WAAW,CAAC,oCAAoC,CAAC,EACzEF,IAAI,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAACG,MAAM,CAAC,CAAC,CAACD,WAAW,CAAC,sBAAsB,CAAC,CACtF,EAAE,OAAOE,GAAG,EAAEC,GAAG,KAAK;EACrB,MAAMC,MAAM,GAAGC,gBAAgB,CAACH,GAAG,CAAC;EACpC,IAAI,CAACE,MAAM,CAACE,OAAO,CAAC,CAAC,EAAE;IACrB,OAAOH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEJ,MAAM,EAAEA,MAAM,CAACK,KAAK,CAAC;IAAE,CAAC,CAAC;EACzD;EAEA,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGT,GAAG,CAACJ,IAAI;EAEpC,IAAI;IACF,IAAIc,IAAI,GAAG,MAAMC,IAAI,CAACC,OAAO,CAAC;MAAEJ;IAAM,CAAC,CAAC;IACxC,IAAI,CAACE,IAAI,EAAE;MACT,OAAOT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEO,KAAK,EAAE;MAAsB,CAAC,CAAC;IAC/D;IAEA,MAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,OAAO,CAACP,QAAQ,EAAEC,IAAI,CAACD,QAAQ,CAAC;IAC7D,IAAI,CAACK,OAAO,EAAE;MACZ,OAAOb,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEO,KAAK,EAAE;MAAsB,CAAC,CAAC;IAC/D;IAEA,MAAMI,OAAO,GAAG;MACdP,IAAI,EAAE;QAAEQ,EAAE,EAAER,IAAI,CAACQ,EAAE;QAAEC,IAAI,EAAET,IAAI,CAACS;MAAK;IACvC,CAAC;IAED,MAAMC,SAAS,GAAGC,GAAG,CAACC,IAAI,CAACL,OAAO,EAAEM,SAAS,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACnEC,OAAO,CAACC,GAAG,CAACN,SAAS,CAAC;IAEtBnB,GAAG,CAACK,IAAI,CAAC;MACPqB,OAAO,EAAE,IAAI;MACbP,SAAS;MACTD,IAAI,EAAET,IAAI,CAACS,IAAI;MACfS,QAAQ,EAAElB;IACZ,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAACA,KAAK,CAACgB,OAAO,CAAC;IAC5B5B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEO,KAAK,EAAE;IAAe,CAAC,CAAC;EACjD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
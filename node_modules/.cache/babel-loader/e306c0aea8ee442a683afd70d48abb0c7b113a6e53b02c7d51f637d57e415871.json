{"ast":null,"code":"// // // import React, { useState } from 'react';\n// // // import { useNavigate, Link } from 'react-router-dom';\n// // // import Navbar from '../components/Navbar';\n\n// // // export default function Signup() {\n// // //   const [credentials, setCredentials] = useState({ name: \"\", email: \"\", password: \"\", geolocation: \"\" });\n// // //   let navigate = useNavigate();\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     console.log(JSON.stringify({name: credentials.name, email: credentials.email, password: credentials.password, location: credentials.geolocation}));\n// // //     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n// // //       method: 'POST',\n// // //       headers: {\n// // //         'Content-Type': 'application/json'\n// // //       },\n// // //       body: JSON.stringify({ name: credentials.name, email: credentials.email, password: credentials.password, location: credentials.geolocation })\n// // //     });\n// // //     const json = await response.json();\n// // //     console.log(json);\n// // //     if (!json.success) {\n// // //       alert(\"Enter valid Credentials\");\n// // //     } else {\n// // //       // Navigate to login or another page upon successful signup\n// // //       navigate(\"/login\");\n// // //     }\n// // //   }\n\n// // //   const onChange = (e) => {\n// // //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// // //   }\n\n// // //   return (\n// // //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/1565982/pexels-photo-1565982.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', backgroundSize: 'cover', height: '100vh' }}>\n// // //       <div>\n// // //         <Navbar />\n// // //       </div>\n\n// // //       <div className='container'>\n// // //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n// // //             <input type=\"text\" className=\"form-control\" name='name' value={credentials.name} onChange={onChange} aria-describedby=\"emailHelp\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n// // //             <input type=\"email\" className=\"form-control\" name='email' value={credentials.email} onChange={onChange} aria-describedby=\"emailHelp\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"geolocation\" className=\"form-label\">Location</label>\n// // //             <input type=\"text\" className=\"form-control\" name='geolocation' value={credentials.geolocation} onChange={onChange} placeholder=\"Enter your location\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n// // //             <input type=\"password\" className=\"form-control\" value={credentials.password} onChange={onChange} name='password' />\n// // //           </div>\n// // //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// // //           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already a user</Link>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n// // import React, { useState } from 'react';\n// // import { useNavigate, Link } from 'react-router-dom';\n// // import Navbar from '../components/Navbar';\n\n// // export default function Signup() {\n// //   const [credentials, setCredentials] = useState({\n// //     name: \"\",\n// //     email: \"\",\n// //     password: \"\",\n// //     geolocation: \"\",\n// //     role: \"user\" // Default to user\n// //   });\n// //   let navigate = useNavigate();\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json'\n// //       },\n// //       body: JSON.stringify({\n// //         name: credentials.name,\n// //         email: credentials.email,\n// //         password: credentials.password,\n// //         location: credentials.geolocation,\n// //         role: credentials.role // Send role with the signup data\n// //       })\n// //     });\n// //     const json = await response.json();\n// //     if (!json.success) {\n// //       alert(\"Enter valid Credentials\");\n// //     } else {\n// //       navigate(\"/login\");\n// //     }\n// //   }\n\n// //   const onChange = (e) => {\n// //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// //   }\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/1565982/pexels-photo-1565982.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', backgroundSize: 'cover', height: '100vh' }}>\n// //       <Navbar />\n// //       <div className='container'>\n// //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n// //             <input type=\"text\" className=\"form-control\" name='name' value={credentials.name} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n// //             <input type=\"email\" className=\"form-control\" name='email' value={credentials.email} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"geolocation\" className=\"form-label\">Location</label>\n// //             <input type=\"text\" className=\"form-control\" name='geolocation' value={credentials.geolocation} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n// //             <input type=\"password\" className=\"form-control\" value={credentials.password} onChange={onChange} name='password' />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"role\" className=\"form-label\">Role</label>\n// //             <select className=\"form-control\" name=\"role\" value={credentials.role} onChange={onChange}>\n// //               <option value=\"user\">User</option>\n// //               <option value=\"admin\">Admin</option>\n// //             </select>\n// //           </div>\n// //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// //           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already a user</Link>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import Navbar from '../components/Navbar';\n\n// export default function Signup() {\n//   const [credentials, setCredentials] = useState({\n//     name: \"\",\n//     email: \"\",\n//     password: \"\",\n//     geolocation: \"\",\n//     role: \"user\" // Default to user\n//   });\n//   let navigate = useNavigate();\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify(credentials),\n//     });\n\n//     const json = await response.json();\n\n//     if (json.success) {\n//       alert(\"You are successfully registered. Please log in.\");\n//       navigate(\"/login\");\n//     } else {\n//       alert(\"Error during registration. Please try again.\");\n//     }\n//   };\n\n//   const onChange = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className='container'>\n//         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               name='name'\n//               value={credentials.name}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               name='email'\n//               value={credentials.email}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               name='password'\n//               value={credentials.password}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"geolocation\" className=\"form-label\">Geolocation</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               name='geolocation'\n//               value={credentials.geolocation}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"role\" className=\"form-label\">Role</label>\n//             <select\n//               className=\"form-control\"\n//               name=\"role\"\n//               value={credentials.role}\n//               onChange={onChange}\n//             >\n//               <option value=\"user\">User</option>\n//               <option value=\"admin\">Admin</option>\n//             </select>\n//           </div>\n//           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n//           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already have an account</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\nconst express = require('express');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User'); // Assuming a User model exists\nconst router = express.Router();\nconst ADMIN_SECRET_KEY = process.env.ADMIN_SECRET_KEY || 'defaultAdminKey';\n\n// User Signup Route\nrouter.post('/signup', async (req, res) => {\n  const {\n    name,\n    email,\n    password,\n    role,\n    adminKey\n  } = req.body;\n  try {\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User already exists'\n      });\n    }\n\n    // Validate admin role\n    if (role === 'admin') {\n      if (adminKey !== ADMIN_SECRET_KEY) {\n        return res.status(403).json({\n          message: 'Invalid admin key'\n        });\n      }\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create a new user\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n      role: role || 'user' // Default role is 'user'\n    });\n\n    // Save the user to the database\n    await newUser.save();\n\n    // Generate a JWT token\n    const token = jwt.sign({\n      id: newUser._id,\n      role: newUser.role\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n    res.status(201).json({\n      message: 'User registered successfully',\n      token\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Something went wrong'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","User","router","Router","ADMIN_SECRET_KEY","process","env","post","req","res","name","email","password","role","adminKey","body","existingUser","findOne","status","json","message","hashedPassword","hash","newUser","save","token","sign","id","_id","JWT_SECRET","expiresIn","error","console","module","exports"],"sources":["C:/Users/ruhan/Documents/gofood/mernapp/src/screens/Signup.js"],"sourcesContent":["// // // import React, { useState } from 'react';\n// // // import { useNavigate, Link } from 'react-router-dom';\n// // // import Navbar from '../components/Navbar';\n\n// // // export default function Signup() {\n// // //   const [credentials, setCredentials] = useState({ name: \"\", email: \"\", password: \"\", geolocation: \"\" });\n// // //   let navigate = useNavigate();\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     console.log(JSON.stringify({name: credentials.name, email: credentials.email, password: credentials.password, location: credentials.geolocation}));\n// // //     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n// // //       method: 'POST',\n// // //       headers: {\n// // //         'Content-Type': 'application/json'\n// // //       },\n// // //       body: JSON.stringify({ name: credentials.name, email: credentials.email, password: credentials.password, location: credentials.geolocation })\n// // //     });\n// // //     const json = await response.json();\n// // //     console.log(json);\n// // //     if (!json.success) {\n// // //       alert(\"Enter valid Credentials\");\n// // //     } else {\n// // //       // Navigate to login or another page upon successful signup\n// // //       navigate(\"/login\");\n// // //     }\n// // //   }\n\n// // //   const onChange = (e) => {\n// // //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// // //   }\n\n// // //   return (\n// // //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/1565982/pexels-photo-1565982.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', backgroundSize: 'cover', height: '100vh' }}>\n// // //       <div>\n// // //         <Navbar />\n// // //       </div>\n\n// // //       <div className='container'>\n// // //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n// // //             <input type=\"text\" className=\"form-control\" name='name' value={credentials.name} onChange={onChange} aria-describedby=\"emailHelp\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n// // //             <input type=\"email\" className=\"form-control\" name='email' value={credentials.email} onChange={onChange} aria-describedby=\"emailHelp\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"geolocation\" className=\"form-label\">Location</label>\n// // //             <input type=\"text\" className=\"form-control\" name='geolocation' value={credentials.geolocation} onChange={onChange} placeholder=\"Enter your location\" />\n// // //           </div>\n// // //           <div className=\"m-3\">\n// // //             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n// // //             <input type=\"password\" className=\"form-control\" value={credentials.password} onChange={onChange} name='password' />\n// // //           </div>\n// // //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// // //           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already a user</Link>\n// // //         </form>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n\n// // import React, { useState } from 'react';\n// // import { useNavigate, Link } from 'react-router-dom';\n// // import Navbar from '../components/Navbar';\n\n// // export default function Signup() {\n// //   const [credentials, setCredentials] = useState({\n// //     name: \"\",\n// //     email: \"\",\n// //     password: \"\",\n// //     geolocation: \"\",\n// //     role: \"user\" // Default to user\n// //   });\n// //   let navigate = useNavigate();\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n// //       method: 'POST',\n// //       headers: {\n// //         'Content-Type': 'application/json'\n// //       },\n// //       body: JSON.stringify({\n// //         name: credentials.name,\n// //         email: credentials.email,\n// //         password: credentials.password,\n// //         location: credentials.geolocation,\n// //         role: credentials.role // Send role with the signup data\n// //       })\n// //     });\n// //     const json = await response.json();\n// //     if (!json.success) {\n// //       alert(\"Enter valid Credentials\");\n// //     } else {\n// //       navigate(\"/login\");\n// //     }\n// //   }\n\n// //   const onChange = (e) => {\n// //     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n// //   }\n\n// //   return (\n// //     <div style={{ backgroundImage: 'url(\"https://images.pexels.com/photos/1565982/pexels-photo-1565982.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")', backgroundSize: 'cover', height: '100vh' }}>\n// //       <Navbar />\n// //       <div className='container'>\n// //         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n// //             <input type=\"text\" className=\"form-control\" name='name' value={credentials.name} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n// //             <input type=\"email\" className=\"form-control\" name='email' value={credentials.email} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"geolocation\" className=\"form-label\">Location</label>\n// //             <input type=\"text\" className=\"form-control\" name='geolocation' value={credentials.geolocation} onChange={onChange} />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n// //             <input type=\"password\" className=\"form-control\" value={credentials.password} onChange={onChange} name='password' />\n// //           </div>\n// //           <div className=\"m-3\">\n// //             <label htmlFor=\"role\" className=\"form-label\">Role</label>\n// //             <select className=\"form-control\" name=\"role\" value={credentials.role} onChange={onChange}>\n// //               <option value=\"user\">User</option>\n// //               <option value=\"admin\">Admin</option>\n// //             </select>\n// //           </div>\n// //           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n// //           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already a user</Link>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import Navbar from '../components/Navbar';\n\n// export default function Signup() {\n//   const [credentials, setCredentials] = useState({\n//     name: \"\",\n//     email: \"\",\n//     password: \"\",\n//     geolocation: \"\",\n//     role: \"user\" // Default to user\n//   });\n//   let navigate = useNavigate();\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const response = await fetch(\"http://localhost:5000/api/createuser\", {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify(credentials),\n//     });\n\n//     const json = await response.json();\n\n//     if (json.success) {\n//       alert(\"You are successfully registered. Please log in.\");\n//       navigate(\"/login\");\n//     } else {\n//       alert(\"Error during registration. Please try again.\");\n//     }\n//   };\n\n//   const onChange = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className='container'>\n//         <form className='w-50 m-auto mt-5 border bg-dark border-success rounded' onSubmit={handleSubmit}>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"name\" className=\"form-label\">Name</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               name='name'\n//               value={credentials.name}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"email\" className=\"form-label\">Email address</label>\n//             <input\n//               type=\"email\"\n//               className=\"form-control\"\n//               name='email'\n//               value={credentials.email}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"password\" className=\"form-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               className=\"form-control\"\n//               name='password'\n//               value={credentials.password}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"geolocation\" className=\"form-label\">Geolocation</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               name='geolocation'\n//               value={credentials.geolocation}\n//               onChange={onChange}\n//               required\n//             />\n//           </div>\n//           <div className=\"m-3\">\n//             <label htmlFor=\"role\" className=\"form-label\">Role</label>\n//             <select\n//               className=\"form-control\"\n//               name=\"role\"\n//               value={credentials.role}\n//               onChange={onChange}\n//             >\n//               <option value=\"user\">User</option>\n//               <option value=\"admin\">Admin</option>\n//             </select>\n//           </div>\n//           <button type=\"submit\" className=\"m-3 btn btn-success\">Submit</button>\n//           <Link to=\"/login\" className=\"m-3 mx-1 btn btn-danger\">Already have an account</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\nconst express = require('express');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User'); // Assuming a User model exists\nconst router = express.Router();\n\nconst ADMIN_SECRET_KEY = process.env.ADMIN_SECRET_KEY || 'defaultAdminKey';\n\n// User Signup Route\nrouter.post('/signup', async (req, res) => {\n    const { name, email, password, role, adminKey } = req.body;\n\n    try {\n        // Check if user already exists\n        const existingUser = await User.findOne({ email });\n        if (existingUser) {\n            return res.status(400).json({ message: 'User already exists' });\n        }\n\n        // Validate admin role\n        if (role === 'admin') {\n            if (adminKey !== ADMIN_SECRET_KEY) {\n                return res.status(403).json({ message: 'Invalid admin key' });\n            }\n        }\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        // Create a new user\n        const newUser = new User({\n            name,\n            email,\n            password: hashedPassword,\n            role: role || 'user', // Default role is 'user'\n        });\n\n        // Save the user to the database\n        await newUser.save();\n\n        // Generate a JWT token\n        const token = jwt.sign({ id: newUser._id, role: newUser.role }, process.env.JWT_SECRET, { expiresIn: '7d' });\n\n        res.status(201).json({ message: 'User registered successfully', token });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Something went wrong' });\n    }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMG,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACxC,MAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;AAE/B,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAG,CAACF,gBAAgB,IAAI,iBAAiB;;AAE1E;AACAF,MAAM,CAACK,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGN,GAAG,CAACO,IAAI;EAE1D,IAAI;IACA;IACA,MAAMC,YAAY,GAAG,MAAMf,IAAI,CAACgB,OAAO,CAAC;MAAEN;IAAM,CAAC,CAAC;IAClD,IAAIK,YAAY,EAAE;MACd,OAAOP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACnE;;IAEA;IACA,IAAIP,IAAI,KAAK,OAAO,EAAE;MAClB,IAAIC,QAAQ,KAAKV,gBAAgB,EAAE;QAC/B,OAAOK,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAoB,CAAC,CAAC;MACjE;IACJ;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMtB,MAAM,CAACuB,IAAI,CAACV,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMW,OAAO,GAAG,IAAItB,IAAI,CAAC;MACrBS,IAAI;MACJC,KAAK;MACLC,QAAQ,EAAES,cAAc;MACxBR,IAAI,EAAEA,IAAI,IAAI,MAAM,CAAE;IAC1B,CAAC,CAAC;;IAEF;IACA,MAAMU,OAAO,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACA,MAAMC,KAAK,GAAGzB,GAAG,CAAC0B,IAAI,CAAC;MAAEC,EAAE,EAAEJ,OAAO,CAACK,GAAG;MAAEf,IAAI,EAAEU,OAAO,CAACV;IAAK,CAAC,EAAER,OAAO,CAACC,GAAG,CAACuB,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAE5GrB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,8BAA8B;MAAEK;IAAM,CAAC,CAAC;EAC5E,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBtB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAuB,CAAC,CAAC;EAC7D;AACJ,CAAC,CAAC;AAEFa,MAAM,CAACC,OAAO,GAAGhC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}